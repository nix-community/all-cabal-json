name:                linked-list-with-iterator
version:             0.1.1.0
synopsis:            A pure linked list which is mutable through iterators.
description:
  It's iternally implemented by 'Data.IntMap.Strict.IntMap' or 'Data.Map.Strict.Map' 'Integer',
  using 'Int' or 'Integer' as the iterator type respectly.
  Most of the operations cost @O(lg N)@.
  .
  Each newly inserted element will consume a unique number and never reuse old numbers.
  Choose 'Int' one if you're sure that there're no more than 'Int' space times of insertions,
  or choose 'Integer' one otherwise.
homepage:            https://github.com/CindyLinz/Haskell-linked-list-with-iterator#readme
license:             BSD3
license-file:        LICENSE
author:              Cindy Wang (CindyLinz)
maintainer:          cindylinz@gmail.com
copyright:           MIT
category:            Data Structures
build-type:          Simple
-- extra-source-files:
cabal-version:       >=1.10

library
  hs-source-dirs:      src
  exposed-modules:     Data.IterLinkedList
                     , Data.IterLinkedList.Internal
  build-depends:       base >= 4.3 && < 5
                     , containers == 0.5.*
  default-language:    Haskell2010

test-suite linked-list-with-iterator-test
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             Spec.hs
  build-depends:       base
                     , linked-list-with-iterator
  ghc-options:         -threaded -rtsopts -with-rtsopts=-N
  default-language:    Haskell2010

source-repository head
  type:     git
  location: https://github.com/CindyLinz/Haskell-linked-list-with-iterator
