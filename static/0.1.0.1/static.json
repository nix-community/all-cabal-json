{
  "description": {
    "spec-version": {
      "Left": [
        3,
        0
      ]
    },
    "package": {
      "name": "static",
      "version": [
        0,
        1,
        0,
        1
      ]
    },
    "license": {
      "Left": {
        "license-expression": {
          "expression": {
            "id": "GPL_3_0_or_later"
          },
          "exception-id": null
        }
      }
    },
    "license-files": [
      "LICENSE.GPL-3"
    ],
    "copyright": "2020 Ximin Luo",
    "maintainer": "infinity0@pwned.gg",
    "author": "Ximin Luo",
    "stability": "",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": ">=8.10.1"
      }
    ],
    "homepage": "https://github.com/infinity0/hs-static",
    "pkg-url": "",
    "bug-reports": "https://github.com/infinity0/hs-static/issues",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/infinity0/hs-static",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Type-safe and interoperable static values and closures",
    "description": "Serialise closures in a type-safe way that interoperates across binaries.\n\nThis package is inspired by @distributed-static@ and GHC's /static pointers/\nin @GHC.StaticPtr@, which came out of the same research. However, we make\nsome significantly-different design choices, described below.\n\nGHC made the design choice to focus on guaranteeing that static values could\nbe passed between nodes if they were running the exact same binary, since\nthey are indexed by 64-bit integers automatically-generated by the compiler.\n@distributed-static@ attempts to support the same source program compiled by\ndifferent versions of GHC. As part of this effort to preserve stability, one\nmust pass in a table ('RemoteTable') whose keys represent the stability, and\nwhose values are resolved potentially differently across compiler versions.\n\nThe need for the caller to pass in a 'RemoteTable' is seen as a liability, so\ntwo subsequent packages @distributed-closure@ and @static-closure@ take the\nopposite approach, ripping out the 'RemoteTable' but doubling down on GHC's\nchoice to guarantee compatibility only across different processes running the\nexact same binary program. Their uses cases are focused around compute\nclusters and other forms of centralised distributed computing, where this is\neasy to achieve and not a problem.\n\nSometimes security is cited as a reason to have this restriction, but this is\na /bogus argument/. \"Guarantee compatibility only across same binary\" means\n\"same binary => compatibility\" whereas the bogus security argument depends on\n\"compatibility => same binary\", which is not true - anyone who analyses your\nbinary will know which numbers to spoof, to convince your program via this\ninterface that they are \"running the same code\". Guaranteeing \"same binary\"\nin an adversial setting is in fact extremely hard and cannot be achieved\nperfectly; in the real-world it can only be approximated, and should be done\nso via mechanisms designed for it, not via numbers that are slightly hard to\nbrute force at best and trivial to find out at worst.\n\nThis package makes the /opposite/ choice, intended for less restricted and\nmore open distributed computing environments such as the internet and\ndecentralised protocols. In these contexts, the requirement of running the\nexact same binary program is impossible to achieve in practise. Furthermore,\nwe see it as an /advantage/ that code does not need to be exactly the same -\nfor example, one can serialise a closure and its inputs, /upgrade your code/,\nthen resume running the closure on the same deserialised input arguments but\nwith a bugfixed closure. The necessity to pass in an explicit 'RemoteTable'\n(here simply called 'staticTab') is not a liability, but a useful tool to\nrepresent high-level compatibility and interoperability. Two nodes with the\nsame keys in their 'staticTab's, know that they can talk to each other\ninteroperably even if their implementations differ significantly. One node\nthat wishes to talk to different nodes running different minor versions of\nthe same protocol, could instantiate two different 'staticTab's with the same\nkeys but different implementations, to handle behavioural nuances between the\nminor versions. In general, it's a useful bit of metadata to keep around in\nyour program code, and can help you perform smooth upgrades of a\nnon-centralised networking protocol more easily.\n\nThere are also a few technical differences between this and\n@distributed-static@, some of which could be re-adopted there too:\n\n*   We use dependent-types and type-level programming to guarantee type\n    safety, rather than 'Rank1Dynamic'. This enables us to store all possible\n    closure types instead of just rank-1 polymorphic functions, including but\n    not limited to: rank-n functions, functions with constraints, those using\n    higher-kinded types, etc.\n\n*   Our serialisation typeclasses are designed to interoperate with many\n    different serialisation frameworks. Instances for 'Data.Binary' and\n    'Codec.Serialise' are provided here for convenience.\n\n*   We have additional Template Haskell splices that support creating static\n    values from top-level definitions that must refer to other static values,\n    whether they be recursive or mutually-recursive or neither. This is\n    achieved using an implementation of @mfix@ for the @Q@ monad.\n\nWe did /not/ implement the ability to compose static references. The main\nreason is that, in our view, the /purpose/ of static closures is to represent\nwhich top-level tasks to execute, and the inputs to execute it on. This is\nthe /interface/ or /contract/ of this concept. /How you run/ the task is an\nimplementation detail, and as discussed above, this might be different across\ndifferent machines or as time passes and we upgrade the code. Therefore it\nmakes no sense to serialise a representation of \"task A is the composition of\nclosure B and closure C\", because it is irrelevant to the /interface/.\n\nIf your /interface/ is actually \"run arbitrary user-defined code\" (e.g. in a\nVM or EDSL evaluator) then it would indeed make sense to support composition,\nbut then you should define your own AST, evaluator, and serialiser for this;\nand pass the ASTs around as regular runtime values, not static values.\nSupporting arbitrary ASTs like this is outside of the scope of this library.\n\nFurther, in Haskell there are many ways of applying values not just @(_ :: a\n-> b) (_ :: a) :: b@, e.g. with constraints, with a combination of static and\nnon-static arguments, with type applications, and so on. Only the simple form\n@(_ :: a -> b) (_ :: a) :: b@ is likely to be interoperable across multiple\nlanguages. Supporting AST statics would therefore unnecessarily restrict how\nwe can implement the behaviour of a static closure in our chosen language.\n\nSee unit tests for example usage, e.g.\n<https://github.com/infinity0/hs-static/tree/master/test/Control/Static/UnitTests.hs UnitTests>",
    "category": "Control, Static, Closure",
    "custom-fields": [],
    "build-type-raw": null,
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "CHANGELOG.md"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "package-flags": [
    {
      "name": "dev",
      "description": "Set compile flags for development",
      "default": false,
      "manual": true
    }
  ],
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Control",
          "Static"
        ],
        [
          "Control",
          "Static",
          "Common"
        ],
        [
          "Control",
          "Static",
          "Closure"
        ],
        [
          "Control",
          "Static",
          "Serialise"
        ],
        [
          "Control",
          "Static",
          "Static"
        ],
        [
          "Control",
          "Static",
          "TH"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [
          "src"
        ],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall",
            "-Wcompat",
            "-Wno-unused-matches",
            "-Wredundant-constraints",
            "-Wincomplete-record-updates",
            "-Wincomplete-uni-patterns",
            "-Wunused-packages"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "constraints",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "text",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "singletons",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "binary",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "bytestring",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "serialise",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "template-haskell",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "constraints",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "text",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "singletons",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "binary",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "bytestring",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "serialise",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "template-haskell",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": [
      {
        "condBranchCondition": {
          "variable": {
            "flag": "dev"
          }
        },
        "condBranchIfTrue": {
          "condTreeData": {
            "name": {},
            "exposed-modules": [],
            "re-exported-modules": [],
            "signatures": [],
            "exposed": true,
            "visibility": "LibraryVisibilityPublic",
            "build-info": {
              "buildable": true,
              "buildTools": [],
              "buildToolDepends": [],
              "cppOptions": [],
              "asmOptions": [],
              "cmmOptions": [],
              "ccOptions": [],
              "cxxOptions": [],
              "ldOptions": [],
              "pkgconfigDepends": [],
              "frameworks": [],
              "extraFrameworkDirs": [],
              "asmSources": [],
              "cmmSources": [],
              "cSources": [],
              "cxxSources": [],
              "jsSources": [],
              "hsSourceDirs": [],
              "otherModules": [],
              "virtualModules": [],
              "autogenModules": [],
              "defaultLanguage": null,
              "otherLanguages": [],
              "defaultExtensions": [],
              "otherExtensions": [],
              "oldExtensions": [],
              "extraLibs": [],
              "extraGHCiLibs": [],
              "extraBundledLibs": [],
              "extraLibFlavours": [],
              "extraDynLibFlavours": [],
              "extraLibDirs": [],
              "includeDirs": [],
              "includes": [],
              "autogenIncludes": [],
              "installIncludes": [],
              "options": [
                [
                  "-Werror",
                  "-O2"
                ],
                []
              ],
              "profOptions": [
                [
                  "-fprof-auto"
                ],
                []
              ],
              "sharedOptions": [
                [],
                []
              ],
              "staticOptions": [
                [],
                []
              ],
              "customFieldsBI": [],
              "targetBuildDepends": [],
              "mixins": []
            }
          },
          "condTreeConstraints": [],
          "condTreeComponents": []
        }
      }
    ]
  },
  "test-suites": {
    "doctests": {
      "condTreeData": {
        "name": "",
        "interface": {
          "version": [
            1,
            0
          ],
          "filepath": "DocTests.hs"
        },
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [
            "test"
          ],
          "otherModules": [],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": "Haskell2010",
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [
              "-Wall",
              "-Wcompat",
              "-Wno-unused-matches",
              "-Wredundant-constraints",
              "-Wincomplete-record-updates",
              "-Wincomplete-uni-patterns",
              "-Wunused-packages",
              "-threaded"
            ],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": ">=4 && <5",
              "library": [
                {}
              ]
            },
            {
              "package-name": "doctest",
              "version-range": "-any",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": ">=4 && <5",
          "library": [
            {}
          ]
        },
        {
          "package-name": "doctest",
          "version-range": "-any",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": [
        {
          "condBranchCondition": {
            "variable": {
              "flag": "dev"
            }
          },
          "condBranchIfTrue": {
            "condTreeData": {
              "name": "",
              "interface": {
                "type": {
                  "name": "",
                  "version": []
                }
              },
              "build-info": {
                "buildable": true,
                "buildTools": [],
                "buildToolDepends": [],
                "cppOptions": [],
                "asmOptions": [],
                "cmmOptions": [],
                "ccOptions": [],
                "cxxOptions": [],
                "ldOptions": [],
                "pkgconfigDepends": [],
                "frameworks": [],
                "extraFrameworkDirs": [],
                "asmSources": [],
                "cmmSources": [],
                "cSources": [],
                "cxxSources": [],
                "jsSources": [],
                "hsSourceDirs": [],
                "otherModules": [],
                "virtualModules": [],
                "autogenModules": [],
                "defaultLanguage": null,
                "otherLanguages": [],
                "defaultExtensions": [],
                "otherExtensions": [],
                "oldExtensions": [],
                "extraLibs": [],
                "extraGHCiLibs": [],
                "extraBundledLibs": [],
                "extraLibFlavours": [],
                "extraDynLibFlavours": [],
                "extraLibDirs": [],
                "includeDirs": [],
                "includes": [],
                "autogenIncludes": [],
                "installIncludes": [],
                "options": [
                  [
                    "-Werror",
                    "-O2"
                  ],
                  []
                ],
                "profOptions": [
                  [
                    "-fprof-auto"
                  ],
                  []
                ],
                "sharedOptions": [
                  [],
                  []
                ],
                "staticOptions": [
                  [],
                  []
                ],
                "customFieldsBI": [],
                "targetBuildDepends": [],
                "mixins": []
              }
            },
            "condTreeConstraints": [],
            "condTreeComponents": []
          }
        }
      ]
    },
    "unit": {
      "condTreeData": {
        "name": "",
        "interface": {
          "version": [
            1,
            0
          ],
          "filepath": "UnitTests.hs"
        },
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [
            "test"
          ],
          "otherModules": [
            [
              "Control",
              "Static",
              "UnitTests"
            ]
          ],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": "Haskell2010",
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [
              "-Wall",
              "-Wcompat",
              "-Wno-unused-matches",
              "-Wredundant-constraints",
              "-Wincomplete-record-updates",
              "-Wincomplete-uni-patterns",
              "-Wunused-packages",
              "-threaded"
            ],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": ">=4 && <5",
              "library": [
                {}
              ]
            },
            {
              "package-name": "tasty",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "tasty-hunit",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "static",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "mtl",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "transformers",
              "version-range": "-any",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": ">=4 && <5",
          "library": [
            {}
          ]
        },
        {
          "package-name": "tasty",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "tasty-hunit",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "static",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "mtl",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "transformers",
          "version-range": "-any",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": [
        {
          "condBranchCondition": {
            "variable": {
              "flag": "dev"
            }
          },
          "condBranchIfTrue": {
            "condTreeData": {
              "name": "",
              "interface": {
                "type": {
                  "name": "",
                  "version": []
                }
              },
              "build-info": {
                "buildable": true,
                "buildTools": [],
                "buildToolDepends": [],
                "cppOptions": [],
                "asmOptions": [],
                "cmmOptions": [],
                "ccOptions": [],
                "cxxOptions": [],
                "ldOptions": [],
                "pkgconfigDepends": [],
                "frameworks": [],
                "extraFrameworkDirs": [],
                "asmSources": [],
                "cmmSources": [],
                "cSources": [],
                "cxxSources": [],
                "jsSources": [],
                "hsSourceDirs": [],
                "otherModules": [],
                "virtualModules": [],
                "autogenModules": [],
                "defaultLanguage": null,
                "otherLanguages": [],
                "defaultExtensions": [],
                "otherExtensions": [],
                "oldExtensions": [],
                "extraLibs": [],
                "extraGHCiLibs": [],
                "extraBundledLibs": [],
                "extraLibFlavours": [],
                "extraDynLibFlavours": [],
                "extraLibDirs": [],
                "includeDirs": [],
                "includes": [],
                "autogenIncludes": [],
                "installIncludes": [],
                "options": [
                  [
                    "-Werror",
                    "-O2"
                  ],
                  []
                ],
                "profOptions": [
                  [
                    "-fprof-auto"
                  ],
                  []
                ],
                "sharedOptions": [
                  [],
                  []
                ],
                "staticOptions": [
                  [],
                  []
                ],
                "customFieldsBI": [],
                "targetBuildDepends": [],
                "mixins": []
              }
            },
            "condTreeConstraints": [],
            "condTreeComponents": []
          }
        }
      ]
    }
  }
}
