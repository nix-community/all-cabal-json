
Name:                fixplate
Version:             0.1.6
Synopsis:            Uniplate-style generic traversals for optionally annotated fixed-point types.
Description:         Uniplate-style generic traversals for fixed-point types, which can be  
                     optionally annotated with attributes. We also provide recursion schemes,
                     a generic zipper, generic pretty-printer, generic tries, generic hashing,
                     and generic tree visualization. See the module "Data.Generics.Fixplate" and 
                     then the individual modules for more detailed information.
License:             BSD3
License-file:        LICENSE
Author:              Balazs Komuves
Copyright:           (c) 2011-2015 Balazs Komuves
Maintainer:          bkomuves (plus) hackage (at) gmail (dot) com
Homepage:            http://code.haskell.org/~bkomuves/
Stability:           Experimental
Category:            Generics
Tested-With:         GHC == 7.10.2
Cabal-Version:       >= 1.10
Build-Type:          Simple

source-repository head
  type:     darcs
  location: http://code.haskell.org/~bkomuves/projects/fixplate/

Flag withQuickCheck
  Description: Compile with the QuickCheck tests. 
  default: False

Flag withUtils
  Description: Include utility modules
  default: True

Library

  Build-Depends:       base >= 4 && < 5

  if flag(withUtils)
    Build-Depends:       containers
    cpp-options:         -DWITH_UTILITY_MODULES

  if flag(withQuickCheck)
    Build-Depends:       QuickCheck > 2.4
    cpp-options:         -DWITH_QUICKCHECK

  Exposed-Modules:     Data.Generics.Fixplate
                       Data.Generics.Fixplate.Base
                       Data.Generics.Fixplate.Functor
                       Data.Generics.Fixplate.Open
                       Data.Generics.Fixplate.Traversals
                       Data.Generics.Fixplate.Morphisms
                       Data.Generics.Fixplate.Attributes
                       Data.Generics.Fixplate.Zipper
                       Data.Generics.Fixplate.Draw
                       Data.Generics.Fixplate.Pretty
                       Data.Generics.Fixplate.Trie
                       Data.Generics.Fixplate.Hash

  if flag(withUtils)
    Exposed-Modules:     
                         Data.Generics.Fixplate.Util.Hash.Class
                         Data.Generics.Fixplate.Util.Hash.Table
                         Data.Generics.Fixplate.Util.Hash.FNV.FNV32
                         Data.Generics.Fixplate.Util.Hash.FNV.FNV64

  Other-Modules:       Data.Generics.Fixplate.Misc

  if flag(withQuickCheck)  
    Exposed-Modules:     Data.Generics.Fixplate.Test.Tools
                         Data.Generics.Fixplate.Test.Instances
                         Data.Generics.Fixplate.Tests

    other-extensions:    TypeSynonymInstances
 
  default-extensions:  CPP
  other-extensions:    TypeOperators

  if impl(ghc)
    default-extensions:  BangPatterns

  Hs-Source-Dirs:      .

  Default-Language:    Haskell2010

  ghc-options:         -Wall -fno-warn-unused-matches -fno-warn-name-shadowing

   