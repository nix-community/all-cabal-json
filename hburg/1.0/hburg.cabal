-- Package Stanza
Name:           hburg
Version:        1.0
License:        BSD3
License-file:   LICENSE
Author:         Igor Boehm <igor@bytelabs.org>
Maintainer:     igor@bytelabs.org
Homepage:       http://www.bytelabs.org/hburg.html
Category:       Code Generation
Synopsis:       Haskell Bottom Up Rewrite Generator
Description:
    HBURG has been designed to produce a code generator for a
    target machine given a specification of an abstract syntax
    tree of a program, as well as a specification of the target
    machine itself. Its goals are the following:
    .
    * Provide a powerful tree pattern matching specification 
      language with simplicity and easy readability in mind.
    .
    * Perform good static analysis aiding during the design of
      grammar specifications.
    .
    * Provide back-ends which generate code for various languages
      from a specification, ready to be plugged into a back-end
      compiler infrastructure. Currently Java Code is being generated.
    .
    See "Homepage" for an example on how to integrate the generated
    code into a compiler.
Stability:      Experimental
build-depends:  base, haskell98, filepath
extra-source-files:
    TODO
    test/01-grammar.tpg
    test/02-grammar.tpg
    test/03-grammar.tpg
    test/04-grammar.tpg
    test/05-grammar.tpg
    test/06-grammar.tpg
    test/errors/err-dupbindings.tpg
    test/errors/err-many-many-errors.tpg
    test/errors/err-manyundefined.tpg
    test/errors/err-selfredef.tpg
    test/errors/err-termredef.tpg
    test/errors/err-typerror1.tpg
    test/errors/err-typerror2.tpg
    test/errors/err-typerror3.tpg
    test/errors/err-useundefined.tpg
    test/errors/err-varyingparams.tpg

-- Executable Stanza
executable:     hburg
main-is:        Main.hs
-- Optional Stuff in the executable stanza
hs-source-dirs: src
other-modules:
    Util
    Debug
    Ast.Attr
    Ast.Bind
    Ast.Code
    Ast.Decl
    Ast.Def
    Ast.Ident
    Ast.Incl
    Ast.Node
    Ast.Nt
    Ast.Op
    Ast.Prod
    Ast.T
    Ast.TermTy
    Csa.Csa
    Env.Elem
    Env.Env
    Gen.Emit
    Gen.Emit.EmitClass
    Gen.Emit.EmitEnums
    Gen.Emit.EmitEval
    Gen.Emit.EmitMapEntry
    Gen.Emit.EmitNodeIf
    Gen.Emit.EmitTiling
    Gen.Emit.JavaClass
    Gen.Emit.Label
    Gen.Emit.Tiling
    Gen.Emit.Java.Java
    Gen.Emit.Java.JComment
    Gen.Emit.Java.JConstructor
    Gen.Emit.Java.JEnum
    Gen.Emit.Java.JMethod
    Gen.Emit.Java.JModifier
    Gen.Emit.Java.JParameter
    Gen.Emit.Java.JVariable
    Parser.Lexer
    Parser.Parser
    Parser.ParseErr
ghc-options: -O
    -funbox-strict-fields 
    -fglasgow-exts 
    -fwarn-unused-imports 
    -fwarn-duplicate-exports 
    -fwarn-incomplete-patterns 
    -fwarn-overlapping-patterns