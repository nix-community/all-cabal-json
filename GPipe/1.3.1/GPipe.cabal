name: GPipe
version: 1.3.1
cabal-version: >= 1.8
build-type: Simple
license: BSD3
copyright: Tobias Bexelius
maintainer: Tobias Bexelius
                 
stability: Experimental
homepage: http://www.haskell.org/haskellwiki/GPipe
package-url: http://hackage.haskell.org/package/GPipe
bug-reports: https://github.com/tobbebex/GPipe/issues
synopsis: A functional graphics API for programmable GPUs
description: GPipe models the entire graphics pipeline in a purely functional, immutable and typesafe way. It is built on top of the programmable pipeline (i.e. non-fixed function) of
             OpenGL 2.1 and uses features such as vertex buffer objects (VBO's), texture objects and GLSL shader code synthetisation to create fast graphics programs. Buffers,
             textures and shaders are cached internally to ensure fast framerate, and GPipe is also capable of managing multiple windows and contexts. By creating your own
             instances of GPipes classes, it's possible to use additional datatypes on the GPU.
             .
             You'll need full OpenGL 2.1 support, including GLSL 1.20 to use GPipe. Thanks to OpenGLRaw, you may still build GPipe programs on machines lacking this support.
             
category: Graphics
author: Tobias Bexelius


Library
    build-depends: 
                    containers >= 0.4 && <0.5,
                    list-tries >= 0.4.1 && < 0.5,
                    GLUT >=2.1.2.1,
                    OpenGL >=2.2.3.0,
                    Boolean == 0.0.1,
                    Vec == 0.9.8,
                    Vec-Boolean == 1.0.4,
                    base >= 4 && <5,
                    transformers
                       
    other-modules: 
                   Formats,
                   GPUStream,
                   InputAssembler,
                   OutputMerger,
                   Rasterizer,
                   Resources,
                   Shader,
                   Textures
    hs-source-dirs: src
    exposed-modules:
                    Graphics.GPipe,
                    Graphics.GPipe.Format,
                    Graphics.GPipe.FrameBuffer,
                    Graphics.GPipe.Stream,
                    Graphics.GPipe.Stream.Fragment,
                    Graphics.GPipe.Stream.Primitive,
                    Graphics.GPipe.Texture
