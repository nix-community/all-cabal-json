name          : wai-routes
version       : 0.6.1
cabal-version : >=1.18
build-type    : Simple
license       : MIT
license-file  : LICENSE
maintainer    : ajnsit@gmail.com
stability     : Experimental
homepage      : https://github.com/ajnsit/wai-routes
synopsis      : Typesafe URLs for Wai applications.
description   : Provides easy to use typesafe URLs for Wai Applications.
             .
             Sample usage follows (See examples/Example.hs in the source bundle for the full code) -
             .
             @
             &#123;-&#35; LANGUAGE OverloadedStrings, TypeFamilies &#35;-&#125;
             .
             import Network.Wai
             import Network.Wai.Middleware.Routes
             .
             import Data.IORef
             .
             &#45;&#45; The Site Argument
             data MyRoute = MyRoute (IORef DB)
             .
             &#45;&#45; Generate Routes
             mkRoute "MyRoute" &#91;parseRoutes&#124;
             &#47;             UsersR         GET
             &#47;user&#47;&#35;Int    UserR&#58;
             &#32;&#32;/              UserRootR   GET
             &#32;&#32;/delete        UserDeleteR POST
             &#124;&#93;
             .
             &#45;&#45; Define Handlers
             &#45;&#45; All Users Page
             getUsersR &#58;&#58; Handler MyRoute
             getUsersR (MyRoute dbref) request = ...
             &#45;&#45; Single User Page
             getUserRootR &#58;&#58; Int -> Handler MyRoute
             getUserRootR userid (MyRoute dbref) request = ...
             &#45;&#45; Delete Single User
             postUserDeleteR &#58;&#58; Int -> Handler MyRoute
             postUserDeleteR userid (MyRoute dbref) request = ...
             .
             &#45;&#45; Define Application using RouteM Monad
             myApp = do
             &#32;&#32;db <- liftIO &#36; newIORef mydb
             &#32;&#32;route (MyRoute db)
             &#32;&#32;setDefaultAction $ staticApp $ defaultFileServerSettings &#34;static&#34;
             .
             &#45;&#45; Run the application
             main &#58;&#58; IO ()
             main = toWaiApp myApp >>= run 8080
             @
category           : Network
author             : Anupam Jain
data-dir           : ""
extra-source-files : README.md examples/Example.hs

source-repository head
    type     : git
    location : http://github.com/ajnsit/wai-routes

source-repository this
    type     : git
    location : http://github.com/ajnsit/wai-routes/tree/v0.6.1
    tag      : v0.6.1

library
    build-depends: base             >= 4.7  && < 4.9
                 , wai              >= 3.0  && < 3.1
                 , text             >= 1.2  && < 1.3
                 , template-haskell >= 2.9  && < 2.11
                 , mtl              >= 2.1  && < 2.3
                 , aeson            >= 0.8  && < 0.9
                 , containers       >= 0.5  && < 0.6
                 , random           >= 1.1  && < 1.2
                 , path-pieces      >= 0.2  && < 0.3
                 , bytestring       >= 0.10 && < 0.11
                 , http-types       >= 0.8  && < 0.9
                 , blaze-builder    >= 0.4  && < 0.5
    exposed-modules: Network.Wai.Middleware.Routes
                     Network.Wai.Middleware.Routes.Parse
                     Network.Wai.Middleware.Routes.Overlap
                     Network.Wai.Middleware.Routes.Class
                     Network.Wai.Middleware.Routes.Routes
                     Network.Wai.Middleware.Routes.Monad
                     Network.Wai.Middleware.Routes.Handler
                     Network.Wai.Middleware.Routes.ContentTypes
                     Network.Wai.Middleware.Routes.TH
                     Network.Wai.Middleware.Routes.TH.Types
                     Network.Wai.Middleware.Routes.TH.Dispatch
                     Network.Wai.Middleware.Routes.TH.ParseRoute
                     Network.Wai.Middleware.Routes.TH.RenderRoute
                     Network.Wai.Middleware.Routes.TH.RouteAttrs
    exposed        : True
    buildable      : True
    hs-source-dirs : src
    default-language   : Haskell2010
