Name:           numeric-prelude
Version:        0.2.2.1
License:        GPL
License-File:   LICENSE
Author:         Dylan Thurston <dpt@math.harvard.edu>, Henning Thielemann <numericprelude@henning-thielemann.de>, Mikael Johansson
Maintainer:     Henning Thielemann <numericprelude@henning-thielemann.de>
Homepage:       http://www.haskell.org/haskellwiki/Numeric_Prelude
Category:       Math
Stability:      Experimental
Cabal-Version:  >=1.6
Build-Type:     Simple
Tested-With:    GHC==6.4.1, GHC==6.8.2, GHC==6.10.4, GHC==6.12.3, GHC==7.0.2, GHC==7.2.1
Synopsis:       An experimental alternative hierarchy of numeric type classes
Description:
  Revisiting the Numeric Classes
  .
  The Prelude for Haskell 98 offers a well-considered set of numeric classes
  which covers the standard numeric types
  ('Integer', 'Int', 'Rational', 'Float', 'Double', 'Complex') quite well.
  But they offer limited extensibility and have a few other flaws.
  In this proposal we will revisit these classes, addressing the following concerns:
  .
  [1] The current Prelude defines no semantics for the fundamental operations.
      For instance, presumably addition should be associative
      (or come as close as feasible),
      but this is not mentioned anywhere.
  .
  [2] There are some superfluous superclasses.
      For instance, 'Eq' and 'Show' are superclasses of 'Num'.
      Consider the data type
      @   data IntegerFunction a = IF (a -> Integer) @
      One can reasonably define all the methods of 'Algebra.Ring.C' for
      @IntegerFunction a@ (satisfying good semantics),
      but it is impossible to define non-bottom instances of 'Eq' and 'Show'.
      In general, superclass relationship should indicate
      some semantic connection between the two classes.
  .
  [3] In a few cases, there is a mix of semantic operations and
      representation-specific operations.
      'toInteger', 'toRational',
      and the various operations in 'RealFloating' ('decodeFloat', ...)
      are the main examples.
  .
  [4] In some cases, the hierarchy is not finely-grained enough:
      Operations that are often defined independently are lumped together.
      For instance, in a financial application one might want a type \"Dollar\",
      or in a graphics application one might want a type \"Vector\".
      It is reasonable to add two Vectors or Dollars,
      but not, in general, reasonable to multiply them.
      But the programmer is currently forced to define a method for '(*)'
      when she defines a method for '(+)'.
  .
  In specifying the semantics of type classes,
  I will state laws as follows:
  .
  >    (a + b) + c === a + (b + c)
  .
  The intended meaning is extensional equality:
  The rest of the program should behave in the same way
  if one side is replaced with the other.
  Unfortunately, the laws are frequently violated by standard instances;
  the law above, for instance, fails for 'Float':
  .
  >    (1e20 + (-1e20)) + 1.0  = 1.0
  >     1e20 + ((-1e20) + 1.0) = 0.0
  .
  For inexact number types like floating point types,
  thus these laws should be interpreted as guidelines rather than absolute rules.
  In particular, the compiler is not allowed to use them for optimization.
  Unless stated otherwise, default definitions should also be taken as laws.
  .
  Thanks to Brian Boutel, Joe English, William Lee Irwin II, Marcin
  Kowalczyk, Ketil Malde, Tom Schrijvers, Ken Shan, and Henning
  Thielemann for helpful comments.
  .
  .
  Usage:
  .
  Write modules in the following style:
  .
  > [-# NoImplicitPrelude #-]
  > module MyModule where
  >
  > ... various specific imports ...
  >
  > import NumericPrelude
  .
  Importing @NumericPrelude@ is almost the same as
  .
  > import NumericPrelude.Numeric
  > import NumericPrelude.Base   .
  .
  Instead of the @NoImplicitPrelude@ pragma
  you could also write @import Prelude ()@
  but this will yield problems with numeric literals.
  .
  .
  Scope & Limitations\/TODO:
  .
  * It might be desireable to split Ord up into Poset and Ord
    (a total ordering).
    This is not addressed here.
  .
  * In some cases, this hierarchy may not yet be fine-grained enough.
    For instance, time spans (\"5 minutes\") can be added to times (\"12:34\"),
    but two times are not addable. (\"12:34 + 8:23\")
    As it stands,
    users have to use a different operator for adding time spans to times
    than for adding two time spans.
    Similar issues arise for vector space et al.
    This is a consciously-made tradeoff, but might be changed.
    This becomes most serious when dealing with quantities with units
    like @length\/distance^2@, for which @(*)@ as defined here is useless.
    (One way to see the issue: should
    @  f x y = iterate (x *) y  @
    have principal type
    @  (Ring.C a) => a -> a -> [a]  @
    or something like
    @  (Ring.C a, Module a b) => a -> b -> [b]  @
    ?)
  .
  * I stuck with the Haskell 98 names.
    In some cases I find them lacking.
    Neglecting backwards compatibility, we have renamed classes as follows:
      Num           --> Additive, Ring, Absolute
      Integral      --> ToInteger, IntegralDomain, RealIntegral
      Fractional    --> Field
      Floating      --> Algebraic, Transcendental
      Real          --> ToRational
      RealFrac      --> RealRing, RealField
      RealFloat     --> RealTranscendental
  .
  .
  Additional standard libraries might include Enum, IEEEFloat (including
  the bulk of the functions in Haskell 98's RealFloat class),
  VectorSpace, Ratio, and Lattice.

Extra-Source-Files:
  Makefile
  docs/NOTES
  docs/README
  src/Algebra/Absolute.hs
  src/Algebra/Additive.hs
  src/Algebra/AffineSpace.hs
  src/Algebra/Algebraic.hs
  src/Algebra/Differential.hs
  src/Algebra/DimensionTerm.hs
  src/Algebra/DivisibleSpace.hs
  src/Algebra/EqualityDecision.hs
  src/Algebra/Field.hs
  src/Algebra/GenerateRules.hs
  src/Algebra/Indexable.hs
  src/Algebra/IntegralDomain.hs
  src/Algebra/Lattice.hs
  src/Algebra/Laws.hs
  src/Algebra/Module.hs
  src/Algebra/ModuleBasis.hs
  src/Algebra/Monoid.hs
  src/Algebra/NonNegative.hs
  src/Algebra/NormedSpace/Euclidean.hs
  src/Algebra/NormedSpace/Maximum.hs
  src/Algebra/NormedSpace/Sum.hs
  src/Algebra/OccasionallyScalar.hs
  src/Algebra/OrderDecision.hs
  src/Algebra/PrincipalIdealDomain.hs
  src/Algebra/RealField.hs
  src/Algebra/RealIntegral.hs
  src/Algebra/RealRing.hs
  src/Algebra/RealTranscendental.hs
  src/Algebra/RightModule.hs
  src/Algebra/Ring.hs
  src/Algebra/ToInteger.hs
  src/Algebra/ToRational.hs
  src/Algebra/Transcendental.hs
  src/Algebra/Units.hs
  src/Algebra/Vector.hs
  src/Algebra/VectorSpace.hs
  src/Algebra/ZeroTestable.hs
  src/MathObj/Algebra.hs
  src/MathObj/DiscreteMap.hs
  src/MathObj/Gaussian/Bell.hs
  src/MathObj/Gaussian/Example.hs
  src/MathObj/Gaussian/Polynomial.hs
  src/MathObj/Gaussian/Variance.hs
  src/MathObj/LaurentPolynomial.hs
  src/MathObj/Matrix.hs
  src/MathObj/Monoid.hs
  src/MathObj/PartialFraction.hs
  src/MathObj/Permutation.hs
  src/MathObj/Permutation/CycleList.hs
  src/MathObj/Permutation/CycleList/Check.hs
  src/MathObj/Permutation/Table.hs
  src/MathObj/Polynomial.hs
  src/MathObj/Polynomial/Core.hs
  src/MathObj/PowerSeries.hs
  src/MathObj/PowerSeries/Core.hs
  src/MathObj/PowerSeries/DifferentialEquation.hs
  src/MathObj/PowerSeries/Example.hs
  src/MathObj/PowerSeries/Mean.hs
  src/MathObj/PowerSeries2.hs
  src/MathObj/PowerSeries2/Core.hs
  src/MathObj/PowerSum.hs
  src/MathObj/RefinementMask2.hs
  src/MathObj/RootSet.hs
  src/Number/Complex.hs
  src/Number/ComplexSquareRoot.hs
  src/Number/DimensionTerm.hs
  src/Number/DimensionTerm/SI.hs
  src/Number/FixedPoint.hs
  src/Number/FixedPoint/Check.hs
  src/Number/GaloisField2p32m5.hs
  src/Number/NonNegative.hs
  src/Number/NonNegativeChunky.hs
  src/Number/OccasionallyScalarExpression.hs
  src/Number/PartiallyTranscendental.hs
  src/Number/Peano.hs
  src/Number/Physical.hs
  src/Number/Physical/Read.hs
  src/Number/Physical/Show.hs
  src/Number/Physical/Unit.hs
  src/Number/Physical/UnitDatabase.hs
  src/Number/Positional.hs
  src/Number/Positional/Check.hs
  src/Number/Quaternion.hs
  src/Number/Ratio.hs
  src/Number/ResidueClass.hs
  src/Number/ResidueClass/Check.hs
  src/Number/ResidueClass/Func.hs
  src/Number/ResidueClass/Maybe.hs
  src/Number/ResidueClass/Reader.hs
  src/Number/Root.hs
  src/Number/SI.hs
  src/Number/SI/Unit.hs
  src/NumericPrelude.hs
  src/NumericPrelude/Base.hs
  src/NumericPrelude/Elementwise.hs
  src/NumericPrelude/List.hs
  src/NumericPrelude/List/Checked.hs
  src/NumericPrelude/List/Generic.hs
  src/NumericPrelude/Numeric.hs
  test/Gaussian.hs
  test/Test.hs
  test/Test/Algebra/IntegralDomain.hs
  test/Test/Algebra/RealRing.hs
  test/Test/MathObj/Gaussian/Bell.hs
  test/Test/MathObj/Gaussian/Polynomial.hs
  test/Test/MathObj/Gaussian/Variance.hs
  test/Test/MathObj/Matrix.hs
  test/Test/MathObj/PartialFraction.hs
  test/Test/MathObj/Polynomial.hs
  test/Test/MathObj/PowerSeries.hs
  test/Test/MathObj/RefinementMask2.hs
  test/Test/Number/ComplexSquareRoot.hs
  test/Test/Number/GaloisField2p32m5.hs
  test/Test/NumericPrelude/Utility.hs
  test/Test/Run.hs
  src-ghc-6.12/Algebra/Absolute.hs
  src-ghc-6.12/Algebra/Additive.hs
  src-ghc-6.12/Algebra/AffineSpace.hs
  src-ghc-6.12/Algebra/Algebraic.hs
  src-ghc-6.12/Algebra/Differential.hs
  src-ghc-6.12/Algebra/DimensionTerm.hs
  src-ghc-6.12/Algebra/DivisibleSpace.hs
  src-ghc-6.12/Algebra/EqualityDecision.hs
  src-ghc-6.12/Algebra/Field.hs
  src-ghc-6.12/Algebra/GenerateRules.hs
  src-ghc-6.12/Algebra/Indexable.hs
  src-ghc-6.12/Algebra/IntegralDomain.hs
  src-ghc-6.12/Algebra/Lattice.hs
  src-ghc-6.12/Algebra/Laws.hs
  src-ghc-6.12/Algebra/Module.hs
  src-ghc-6.12/Algebra/ModuleBasis.hs
  src-ghc-6.12/Algebra/Monoid.hs
  src-ghc-6.12/Algebra/NonNegative.hs
  src-ghc-6.12/Algebra/NormedSpace/Euclidean.hs
  src-ghc-6.12/Algebra/NormedSpace/Maximum.hs
  src-ghc-6.12/Algebra/NormedSpace/Sum.hs
  src-ghc-6.12/Algebra/OccasionallyScalar.hs
  src-ghc-6.12/Algebra/OrderDecision.hs
  src-ghc-6.12/Algebra/PrincipalIdealDomain.hs
  src-ghc-6.12/Algebra/RealField.hs
  src-ghc-6.12/Algebra/RealIntegral.hs
  src-ghc-6.12/Algebra/RealRing.hs
  src-ghc-6.12/Algebra/RealTranscendental.hs
  src-ghc-6.12/Algebra/RightModule.hs
  src-ghc-6.12/Algebra/Ring.hs
  src-ghc-6.12/Algebra/ToInteger.hs
  src-ghc-6.12/Algebra/ToRational.hs
  src-ghc-6.12/Algebra/Transcendental.hs
  src-ghc-6.12/Algebra/Units.hs
  src-ghc-6.12/Algebra/Vector.hs
  src-ghc-6.12/Algebra/VectorSpace.hs
  src-ghc-6.12/Algebra/ZeroTestable.hs
  src-ghc-6.12/MathObj/Algebra.hs
  src-ghc-6.12/MathObj/DiscreteMap.hs
  src-ghc-6.12/MathObj/Gaussian/Bell.hs
  src-ghc-6.12/MathObj/Gaussian/Example.hs
  src-ghc-6.12/MathObj/Gaussian/Polynomial.hs
  src-ghc-6.12/MathObj/Gaussian/Variance.hs
  src-ghc-6.12/MathObj/LaurentPolynomial.hs
  src-ghc-6.12/MathObj/Matrix.hs
  src-ghc-6.12/MathObj/Monoid.hs
  src-ghc-6.12/MathObj/PartialFraction.hs
  src-ghc-6.12/MathObj/Permutation.hs
  src-ghc-6.12/MathObj/Permutation/CycleList.hs
  src-ghc-6.12/MathObj/Permutation/CycleList/Check.hs
  src-ghc-6.12/MathObj/Permutation/Table.hs
  src-ghc-6.12/MathObj/Polynomial.hs
  src-ghc-6.12/MathObj/Polynomial/Core.hs
  src-ghc-6.12/MathObj/PowerSeries.hs
  src-ghc-6.12/MathObj/PowerSeries/Core.hs
  src-ghc-6.12/MathObj/PowerSeries/DifferentialEquation.hs
  src-ghc-6.12/MathObj/PowerSeries/Example.hs
  src-ghc-6.12/MathObj/PowerSeries/Mean.hs
  src-ghc-6.12/MathObj/PowerSeries2.hs
  src-ghc-6.12/MathObj/PowerSeries2/Core.hs
  src-ghc-6.12/MathObj/PowerSum.hs
  src-ghc-6.12/MathObj/RefinementMask2.hs
  src-ghc-6.12/MathObj/RootSet.hs
  src-ghc-6.12/Number/Complex.hs
  src-ghc-6.12/Number/ComplexSquareRoot.hs
  src-ghc-6.12/Number/DimensionTerm.hs
  src-ghc-6.12/Number/DimensionTerm/SI.hs
  src-ghc-6.12/Number/FixedPoint.hs
  src-ghc-6.12/Number/FixedPoint/Check.hs
  src-ghc-6.12/Number/GaloisField2p32m5.hs
  src-ghc-6.12/Number/NonNegative.hs
  src-ghc-6.12/Number/NonNegativeChunky.hs
  src-ghc-6.12/Number/OccasionallyScalarExpression.hs
  src-ghc-6.12/Number/PartiallyTranscendental.hs
  src-ghc-6.12/Number/Peano.hs
  src-ghc-6.12/Number/Physical.hs
  src-ghc-6.12/Number/Physical/Read.hs
  src-ghc-6.12/Number/Physical/Show.hs
  src-ghc-6.12/Number/Physical/Unit.hs
  src-ghc-6.12/Number/Physical/UnitDatabase.hs
  src-ghc-6.12/Number/Positional.hs
  src-ghc-6.12/Number/Positional/Check.hs
  src-ghc-6.12/Number/Quaternion.hs
  src-ghc-6.12/Number/Ratio.hs
  src-ghc-6.12/Number/ResidueClass.hs
  src-ghc-6.12/Number/ResidueClass/Check.hs
  src-ghc-6.12/Number/ResidueClass/Func.hs
  src-ghc-6.12/Number/ResidueClass/Maybe.hs
  src-ghc-6.12/Number/ResidueClass/Reader.hs
  src-ghc-6.12/Number/Root.hs
  src-ghc-6.12/Number/SI.hs
  src-ghc-6.12/Number/SI/Unit.hs
  src-ghc-6.12/NumericPrelude.hs
  src-ghc-6.12/NumericPrelude/Base.hs
  src-ghc-6.12/NumericPrelude/Elementwise.hs
  src-ghc-6.12/NumericPrelude/List.hs
  src-ghc-6.12/NumericPrelude/List/Checked.hs
  src-ghc-6.12/NumericPrelude/List/Generic.hs
  src-ghc-6.12/NumericPrelude/Numeric.hs
  test-ghc-6.12/Gaussian.hs
  test-ghc-6.12/Test.hs
  test-ghc-6.12/Test/Algebra/IntegralDomain.hs
  test-ghc-6.12/Test/Algebra/RealRing.hs
  test-ghc-6.12/Test/MathObj/Gaussian/Bell.hs
  test-ghc-6.12/Test/MathObj/Gaussian/Polynomial.hs
  test-ghc-6.12/Test/MathObj/Gaussian/Variance.hs
  test-ghc-6.12/Test/MathObj/Matrix.hs
  test-ghc-6.12/Test/MathObj/PartialFraction.hs
  test-ghc-6.12/Test/MathObj/Polynomial.hs
  test-ghc-6.12/Test/MathObj/PowerSeries.hs
  test-ghc-6.12/Test/MathObj/RefinementMask2.hs
  test-ghc-6.12/Test/Number/ComplexSquareRoot.hs
  test-ghc-6.12/Test/Number/GaloisField2p32m5.hs
  test-ghc-6.12/Test/NumericPrelude/Utility.hs
  test-ghc-6.12/Test/Run.hs

Flag splitBase
  description: Choose the new smaller, split-up base package.

Flag buildTests
  description: Build test executables
  default:     False

Source-Repository this
  Tag:         0.2.2
  Type:        darcs
  Location:    http://code.haskell.org/numeric-prelude/

Source-Repository head
  Type:        darcs
  Location:    http://code.haskell.org/numeric-prelude/

Library
  Build-Depends:
    parsec >=1 && <4,
    QuickCheck >=1 && <3,
    storable-record >=0.0.1 && <0.1,
    non-negative >=0.0.5 && <0.2,
    utility-ht >=0.0.6 && <0.1
  If flag(splitBase)
    Build-Depends:
      base >= 2 && <6,
      array >=0.1 && <0.4,
      containers >=0.1 && <0.5,
      random >=1.0 && <1.1
  Else
    Build-Depends: base >= 1.0 && < 2

  GHC-Options:    -Wall
  If impl(ghc>=7.0)
    Hs-source-dirs: src
  Else
    Hs-source-dirs: src-ghc-6.12
  Exposed-modules:
    Algebra.Absolute
    Algebra.Additive
    Algebra.Algebraic
    Algebra.Differential
    Algebra.DimensionTerm
    Algebra.DivisibleSpace
    Algebra.Field
    Algebra.Indexable
    Algebra.IntegralDomain
    Algebra.NonNegative
    Algebra.Lattice
    Algebra.Laws
    Algebra.Module
    Algebra.ModuleBasis
    Algebra.Monoid
    Algebra.NormedSpace.Euclidean
    Algebra.NormedSpace.Maximum
    Algebra.NormedSpace.Sum
    Algebra.OccasionallyScalar
    Algebra.PrincipalIdealDomain
    Algebra.RealField
    Algebra.RealIntegral
    Algebra.RealRing
    Algebra.RealTranscendental
    Algebra.RightModule
    Algebra.Ring
    Algebra.ToInteger
    Algebra.ToRational
    Algebra.Transcendental
    Algebra.Units
    Algebra.Vector
    Algebra.VectorSpace
    Algebra.ZeroTestable
    MathObj.Algebra
    MathObj.DiscreteMap
    MathObj.LaurentPolynomial
    MathObj.Matrix
    MathObj.Monoid
    MathObj.PartialFraction
    MathObj.Permutation
    MathObj.Permutation.CycleList
    MathObj.Permutation.CycleList.Check
    MathObj.Permutation.Table
    MathObj.Polynomial
    MathObj.Polynomial.Core
    MathObj.PowerSeries
    MathObj.PowerSeries.Core
    MathObj.PowerSeries.DifferentialEquation
    MathObj.PowerSeries.Example
    MathObj.PowerSeries.Mean
    MathObj.PowerSeries2
    MathObj.PowerSeries2.Core
    MathObj.PowerSum
    MathObj.RefinementMask2
    MathObj.RootSet
    Number.Complex
    Number.DimensionTerm
    Number.DimensionTerm.SI
    Number.FixedPoint
    Number.FixedPoint.Check
    Number.GaloisField2p32m5
    Number.NonNegative
    Number.NonNegativeChunky
    Number.PartiallyTranscendental
    Number.Peano
    Number.Positional
    Number.Positional.Check
    Number.Quaternion
    Number.Ratio
    Number.ResidueClass
    Number.ResidueClass.Check
    Number.ResidueClass.Maybe
    Number.ResidueClass.Func
    Number.ResidueClass.Reader
    Number.Root
    Number.OccasionallyScalarExpression
    Number.SI.Unit
    Number.SI
    Number.Physical.Unit
    Number.Physical.UnitDatabase
    Number.Physical
    Number.Physical.Read
    Number.Physical.Show
    NumericPrelude.List.Checked
    NumericPrelude.List.Generic
    NumericPrelude.Elementwise
    NumericPrelude.Numeric
    NumericPrelude.Base
    NumericPrelude
  Other-modules:
    NumericPrelude.List
    Algebra.AffineSpace
    MathObj.Gaussian.Variance
    MathObj.Gaussian.Bell
    MathObj.Gaussian.Polynomial
    Number.ComplexSquareRoot
    -- I think I won't add them this way.
    -- It is certainly better to split the class into comparison and selection.
    Algebra.EqualityDecision
    Algebra.OrderDecision

Executable test
  If impl(ghc>=7.0)
    Hs-source-dirs: src, test
  Else
    Hs-source-dirs: src-ghc-6.12, test-ghc-6.12
  Main-Is: Test.hs
  If !flag(buildTests)
    Buildable:         False

Executable testsuite
  If impl(ghc>=7.0)
    Hs-source-dirs: src, test
  Else
    Hs-source-dirs: src-ghc-6.12, test-ghc-6.12
  GHC-Options:    -Wall
  Other-modules:
    Test.NumericPrelude.Utility
    Test.Number.GaloisField2p32m5
    Test.Number.ComplexSquareRoot
    Test.Algebra.IntegralDomain
    Test.Algebra.RealRing
    Test.MathObj.RefinementMask2
    Test.MathObj.PartialFraction
    Test.MathObj.Matrix
    Test.MathObj.Polynomial
    Test.MathObj.PowerSeries
    Test.MathObj.Gaussian.Variance
    Test.MathObj.Gaussian.Bell
    Test.MathObj.Gaussian.Polynomial
  Main-Is: Test/Run.hs
  If flag(buildTests)
    Build-Depends: HUnit >=1 && <2
  Else
    Buildable: False

Executable test-gaussian
  If impl(ghc>=7.0)
    Hs-source-dirs: src, test
  Else
    Hs-source-dirs: src-ghc-6.12, test-ghc-6.12
  Main-Is: Gaussian.hs
  Other-Modules:
    MathObj.Gaussian.Example
  If flag(buildTests)
    Build-Depends:
      gnuplot >=0.3 && <0.5,
      HTam >=0.0.2 && <0.1
  Else
    Buildable: False
