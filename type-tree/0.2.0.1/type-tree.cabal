name:               type-tree
version:            0.2.0.1
synopsis:           Tree representations of datatypes
description:        @type-tree@ provides TH splices for generating tree representations of
                    the types contained in datatypes. This is useful for, for example,
                    generating class instances for a deeply nested datatype.
license:            MIT
license-file:       LICENSE
author:             Jude Taylor
maintainer:         me@jude.xyz
tested-with:        GHC == 7.8.4, GHC == 7.10.3, GHC == 8.0.2, GHC == 8.2.2, GHC == 8.4.1
category:           Language
homepage:           https://github.com/pikajude/type-tree
build-type:         Custom
extra-source-files: ChangeLog.md
cabal-version:      >= 1.10

custom-setup
  setup-depends: base == 4.*, Cabal, cabal-doctest >= 1 && < 1.1

source-repository head
  type:     git
  location: https://github.com/pikajude/type-tree.git

library
  exposed-modules:    Language.Haskell.TypeTree
                      Language.Haskell.TypeTree.ExampleDatatypes
  other-modules:      Language.Haskell.TypeTree.CheatingLift
                      Language.Haskell.TypeTree.Datatype
                      Language.Haskell.TypeTree.Leaf
  hs-source-dirs:     src
  build-depends:      base             >= 4.7 && < 5
                    , base-compat      == 0.10.*
                    , containers
                    , mtl
                    , pretty
                    , template-haskell
                    , zenc
  default-language:   Haskell2010
  default-extensions: NoImplicitPrelude
  other-extensions:   FlexibleInstances
                      CPP
                      TypeSynonymInstances
                      TemplateHaskell
                      DeriveDataTypeable
  ghc-options:        -Wall -fno-warn-missing-signatures -fno-warn-name-shadowing

test-suite doctest
  type:             exitcode-stdio-1.0
  main-is:          doctests.hs
  hs-source-dirs:   tests
  build-depends:    base, doctest
  default-language: Haskell2010
