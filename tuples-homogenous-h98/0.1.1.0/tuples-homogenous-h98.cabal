-- Initial tuples-homogenous-h98.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

-- The name of the package.
name:                tuples-homogenous-h98

-- The package version.  See the Haskell package versioning policy (PVP) 
-- for standards guiding when and how versions should be incremented.
-- http://www.haskell.org/haskellwiki/Package_versioning_policy
-- PVP summary:      +-+------- breaking API changes
--                   | | +----- non-breaking API additions
--                   | | | +--- code changes with no API change
version:             0.1.1.0

-- A short (one-line) description of the package.
synopsis:            Wrappers for n-ary tuples with Traversable and Applicative/Monad instances.

-- A longer description of the package.
description:         Provides @newtype@ wrappers for n-ary homogenous tuples of types @(a,...,a)@ and instances for @Functor@, @Applicative@ (zipping), @Monad@, @Foldable@ and @Traversable@. The package aims to be Haskell98 compliant.

-- URL for the project homepage or repository.
homepage:            https://github.com/ppetr/tuples-homogenous-h98

-- The license under which the package is released.
license:             BSD3

-- The file containing the license text.
license-file:        LICENSE

-- The package author(s).
author:              Petr Pudlák

-- An email address to which users can send suggestions, bug reports, and 
-- patches.
maintainer:          Petr Pudlák

bug-reports:         https://github.com/ppetr/tuples-homogenous-h98/issues

-- A copyright notice.
-- copyright:           

category:            Data

build-type:          Simple

-- Constraint on the version of Cabal needed to build this package.
cabal-version:       >=1.8


library
  -- Modules exported by the library.
  exposed-modules:     Data.Tuple.Homogenous
  
  -- Modules included in this library but not exported.
  -- other-modules:       
  
  -- Other library packages from which modules are imported.
  build-depends:       base >= 4 && < 5
  
