{
  "description": {
    "spec-version": {
      "Right": ">=1.2"
    },
    "package": {
      "name": "shelltestrunner",
      "version": [
        0,
        2
      ]
    },
    "license": {
      "Right": "OtherLicense"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "Simon Michael <simon@joyful.com>",
    "author": "Simon Michael <simon@joyful.com>",
    "stability": "experimental",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==6.10"
      }
    ],
    "homepage": "http://joyful.com/darcsweb/darcsweb.cgi?r=shelltestrunner",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [],
    "synopsis": "A handy tool for testing command-line programs.",
    "description": "Run a given program through \"shell\" tests specifed by\none or more test files, each of which specifies:\ncommand-line arguments, input, expected output,\nexpected stderr output, and expected exit code.  This\nwas extracted from the hledger project, and inspired\nby the tests in John Wiegley's ledger project.\nThis uses test-framework's test runner.  Output order\nis currently a bit mixed up. Any command-line options\nare passed through to the test-framework runner, but\nthey must not contain spaces, so use eg -tpattern not\n-t pattern. You may be able to get a big speedup by\nrunning tests in parallel: try -j8.\nUsage:\n$ shelltestrunner [testrunneropts] executable testfile1 [testfile2 ...]\nTest file format:\n-opt1 -opt2 arg1 arg2\n<<<\n0 or more lines of input\n>>>\n0 or more lines of expected output\n>>>2\n0 or more lines of expected error output\n<<<expected numeric exit code>>>\nLines whose first non-whitespace character is ; are\nignored, mostly.  The first line is the command line,\nto be appended to the executable name.  All remaining\nfields are optional; when omitted they are assumed\nto be \"\", \"\", \"\", and 0 respectively.",
    "category": "Testing",
    "custom-fields": [
      [
        "x-revision",
        "1"
      ]
    ],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "executables": {
    "shelltestrunner": {
      "condTreeData": {
        "name": "shelltestrunner",
        "module-path": "shelltestrunner.hs",
        "scope": "public",
        "build-info": {
          "buildable": true,
          "buildTools": [],
          "buildToolDepends": [],
          "cppOptions": [],
          "asmOptions": [],
          "cmmOptions": [],
          "ccOptions": [],
          "cxxOptions": [],
          "ldOptions": [],
          "pkgconfigDepends": [],
          "frameworks": [],
          "extraFrameworkDirs": [],
          "asmSources": [],
          "cmmSources": [],
          "cSources": [],
          "cxxSources": [],
          "jsSources": [],
          "hsSourceDirs": [],
          "otherModules": [],
          "virtualModules": [],
          "autogenModules": [],
          "defaultLanguage": null,
          "otherLanguages": [],
          "defaultExtensions": [],
          "otherExtensions": [],
          "oldExtensions": [],
          "extraLibs": [],
          "extraGHCiLibs": [],
          "extraBundledLibs": [],
          "extraLibFlavours": [],
          "extraDynLibFlavours": [],
          "extraLibDirs": [],
          "includeDirs": [],
          "includes": [],
          "autogenIncludes": [],
          "installIncludes": [],
          "options": [
            [
              "-Wall",
              "-threaded"
            ],
            []
          ],
          "profOptions": [
            [],
            []
          ],
          "sharedOptions": [
            [],
            []
          ],
          "staticOptions": [
            [],
            []
          ],
          "customFieldsBI": [],
          "targetBuildDepends": [
            {
              "package-name": "base",
              "version-range": ">=3 && <4.18",
              "library": [
                {}
              ]
            },
            {
              "package-name": "parsec",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "process",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "HUnit",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "test-framework",
              "version-range": "-any",
              "library": [
                {}
              ]
            },
            {
              "package-name": "test-framework-hunit",
              "version-range": ">=0.2 && <0.3",
              "library": [
                {}
              ]
            }
          ],
          "mixins": []
        }
      },
      "condTreeConstraints": [
        {
          "package-name": "base",
          "version-range": ">=3 && <4.18",
          "library": [
            {}
          ]
        },
        {
          "package-name": "parsec",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "process",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "HUnit",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "test-framework",
          "version-range": "-any",
          "library": [
            {}
          ]
        },
        {
          "package-name": "test-framework-hunit",
          "version-range": ">=0.2 && <0.3",
          "library": [
            {}
          ]
        }
      ],
      "condTreeComponents": []
    }
  }
}
