name: fast-tags
version: 0.0.6
cabal-version: >= 1.8
build-type: Simple
synopsis: Fast incremental vi tags.
description:
    Yet another tags program.  Like hasktags, it uses its own parser rather
    than haskell-src or haskell-src-exts, so it's fast.  It understands
    hsc files, though not literate haskell.
    .
    In addition, it will load an existing tags file and merge generated tags.
    .
    The intent is to bind it to vim's BufWrite autocommand to automatically
    keep the tags file up to date.  This only works for files changed by the
    editor of course, so you may want to bind 'rm tags' to a 'pull' posthook.
    .
    Limitations:
    .
    - No emacs tags, but they would be easy to add.
    .
    - Not using a real haskell parser means there are more likely to be dark
    corners that don't parse right.
    .
    - Only top-level functions with type declarations are tagged.  Top-level
    functions without type declarations are skipped, as are ones inside 'let'
    or 'where'.
    .
    - Code has to be indented \"properly\", so brace and semicolon style with
    strange dedents will probably confuse it.

category: Haskell, Development
license: BSD3
license-file: LICENSE
author: Evan Laforge
maintainer: Evan Laforge <qdunkan@gmail.com>
stability: stable
tested-with: GHC>=7.0.3
data-files: README
extra-source-files:
    changelog.md
    src/*.hs

homepage: https://github.com/elaforge/fast-tags
source-repository head
    type: git
    location: git://github.com/elaforge/fast-tags.git

executable fast-tags
    main-is: Main.hs
    hs-source-dirs: src
    build-depends: base >= 3 && < 5, containers,
        -- text 0.11.1.12 has a bug.
        text (> 0.11.1.12 || < 0.11.1.12)
    ghc-options: -Wall -fno-warn-name-shadowing

test-suite tests
    type: exitcode-stdio-1.0
    hs-source-dirs: src
    main-is: Main_test.hs
    build-depends: ghc,
        base >= 3 && < 5, containers,
        -- text 0.11.1.12 has a bug.
        text (> 0.11.1.12 || < 0.11.1.12)
    -- Needed for the srcloc hack.
    ghc-options: -fno-ignore-asserts
