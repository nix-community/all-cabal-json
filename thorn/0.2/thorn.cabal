name: thorn
synopsis: Datatype Manipulation with Template Haskell
description:
    Thorn generates
    .
    * functors from various kinds of datatypes, regardless of arity or variances.
    .
    * folds and unfolds from various kinds of recursive datatypes, including mutually recursive ones.
    .
    A single function of Thorn will give you a lot. Just try it.
category: Data, Generics
version: 0.2
x-revision: 1
stability: experimental
license: BSD3
license-file: LICENSE
copyright: Copyright (C) 2013 Yusuke Matsushita
author: Yusuke Matsushita
maintainer: Yusuke Matsushita <y.skm24t@gmail.com>
homepage: https://github.com/Kinokkory/Thorn
bug-reports: https://github.com/Kinokkory/Thorn/issues
build-type: Simple
cabal-version: >= 1.16

source-repository head
    type: git
    location: git://github.com/Kinokkory/Thorn.git

library
    exposed-modules: Data.Thorn, Data.Thorn.Functor, Data.Thorn.Fold, Data.Thorn.Basic
    other-modules: Data.Thorn.Internal
    build-depends:
        base >= 4 && < 5,
        random > 1,
        template-haskell < 3,
        mtl < 3,
        containers < 1,
        contravariant < 1,
        bifunctors < 5,
        profunctors < 5
    ghc-options: -Wall
    default-language: Haskell2010
