{
  "description": {
    "spec-version": {
      "Right": ">=1.6"
    },
    "package": {
      "name": "control-monad-exception",
      "version": [
        0,
        8,
        0,
        4
      ]
    },
    "license": {
      "Right": "PublicDomain"
    },
    "license-files": [],
    "copyright": "",
    "maintainer": "pepeiborra@gmail.com",
    "author": "Pepe Iborra",
    "stability": "experimental",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==6.12.1"
      }
    ],
    "homepage": "http://pepeiborra.github.com/control-monad-exception",
    "pkg-url": "",
    "bug-reports": "http://github.com/pepeiborra/control-monad-exception/issues",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "git://github.com/pepeiborra/control-monad-exception.git",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Explicitly typed, checked exceptions with stack traces",
    "description": "This package provides explicitly typed, checked exceptions as a library.\n\nComputations throwing different types of exception can be combined seamlessly.\n\n/Example/\n\n> data Expr = Add Expr Expr | Div Expr Expr | Val Double\n> eval (Val x)     = return x\n> eval (Add a1 a2) = do\n>    v1 <- eval a1\n>    v2 <- eval a2\n>    let sum = v1 + v2\n>    if sum < v1 || sum < v2 then throw SumOverflow else return sum\n> eval (Div a1 a2) = do\n>    v1 <- eval a1\n>    v2 <- eval a2\n>    if v2 == 0 then throw DivideByZero else return (v1 / v2)\n\n> data DivideByZero = DivideByZero deriving (Show, Typeable)\n> data SumOverflow  = SumOverflow  deriving (Show, Typeable)\n\n> instance Exception DivideByZero\n> instance Exception SumOverflow\n\nGHCi infers the following types\n\n> eval :: (Throws DivideByZero l, Throws SumOverflow l) => Expr -> EM l Double\n> eval `catch` \\ (e::DivideByZero) -> return (-1)  :: Throws SumOverflow l => Expr -> EM l Double\n> runEM(eval `catch` \\ (e::SomeException) -> return (-1))  :: Expr -> Double\n\n\nIn addition to explicitly typed exceptions his package provides:\n\n* Support for explicitly documented, unchecked exceptions (via 'Control.Monad.Exception.tryEMT').\n\n* Support for selective unchecked exceptions (via 'Control.Monad.Exception.UncaughtException').\n\n* Support for exception call traces via 'Control.Monad.Loc.MonadLoc'. /Example:/\n\n>\n> f () = do throw MyException\n> g a  = do f a\n>\n> main = runEMT $ do g () `catchWithSrcLoc`\n>                        \\loc (e::MyException) -> lift(putStrLn$ showExceptionWithTrace loc e)\n>\n> -- Running main produces the output:\n>\n> *Main> main\n>  MyException\n>    in f, Main(example.hs): (1,6)\n>       g, Main(example.hs): (2,6)\n>       main, Main(example.hs): (5,9)\n>       main, Main(example.hs): (4,16)",
    "category": "Control, Monads, Failure",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "package-flags": [
    {
      "name": "extensibleexceptions",
      "description": "Use extensible-exception package",
      "default": false,
      "manual": false
    }
  ],
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Control",
          "Monad",
          "Exception"
        ],
        [
          "Control",
          "Monad",
          "Exception",
          "Base"
        ],
        [
          "Control",
          "Monad",
          "Exception",
          "Catch"
        ],
        [
          "Control",
          "Monad",
          "Exception",
          "Throws"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [
          {
            "enable-extension": "MultiParamTypeClasses"
          },
          {
            "enable-extension": "ScopedTypeVariables"
          },
          {
            "enable-extension": "FlexibleContexts"
          },
          {
            "enable-extension": "FlexibleInstances"
          },
          {
            "enable-extension": "TypeSynonymInstances"
          },
          {
            "enable-extension": "EmptyDataDecls"
          },
          {
            "enable-extension": "DeriveDataTypeable"
          },
          {
            "enable-extension": "PatternGuards"
          }
        ],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [
            "-Wall",
            "-fno-warn-name-shadowing",
            "-fno-warn-orphans"
          ],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "failure",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "monadloc",
            "version-range": "-any",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "failure",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "monadloc",
        "version-range": "-any",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": [
      {
        "condBranchCondition": {
          "variable": {
            "flag": "extensibleexceptions"
          }
        },
        "condBranchIfTrue": {
          "condTreeData": {
            "name": {},
            "exposed-modules": [],
            "re-exported-modules": [],
            "signatures": [],
            "exposed": true,
            "visibility": "LibraryVisibilityPublic",
            "build-info": {
              "buildable": true,
              "buildTools": [],
              "buildToolDepends": [],
              "cppOptions": [],
              "asmOptions": [],
              "cmmOptions": [],
              "ccOptions": [],
              "cxxOptions": [],
              "ldOptions": [],
              "pkgconfigDepends": [],
              "frameworks": [],
              "extraFrameworkDirs": [],
              "asmSources": [],
              "cmmSources": [],
              "cSources": [],
              "cxxSources": [],
              "jsSources": [],
              "hsSourceDirs": [],
              "otherModules": [],
              "virtualModules": [],
              "autogenModules": [],
              "defaultLanguage": null,
              "otherLanguages": [],
              "defaultExtensions": [],
              "otherExtensions": [],
              "oldExtensions": [],
              "extraLibs": [],
              "extraGHCiLibs": [],
              "extraBundledLibs": [],
              "extraLibFlavours": [],
              "extraDynLibFlavours": [],
              "extraLibDirs": [],
              "includeDirs": [],
              "includes": [],
              "autogenIncludes": [],
              "installIncludes": [],
              "options": [
                [],
                []
              ],
              "profOptions": [
                [],
                []
              ],
              "sharedOptions": [
                [],
                []
              ],
              "staticOptions": [
                [],
                []
              ],
              "customFieldsBI": [],
              "targetBuildDepends": [
                {
                  "package-name": "extensible-exceptions",
                  "version-range": ">=0.1 && <0.2",
                  "library": [
                    {}
                  ]
                },
                {
                  "package-name": "base",
                  "version-range": ">=3.0 && <4",
                  "library": [
                    {}
                  ]
                }
              ],
              "mixins": []
            }
          },
          "condTreeConstraints": [
            {
              "package-name": "extensible-exceptions",
              "version-range": ">=0.1 && <0.2",
              "library": [
                {}
              ]
            },
            {
              "package-name": "base",
              "version-range": ">=3.0 && <4",
              "library": [
                {}
              ]
            }
          ],
          "condTreeComponents": []
        },
        "condBranchIfFalse": {
          "condTreeData": {
            "name": {},
            "exposed-modules": [],
            "re-exported-modules": [],
            "signatures": [],
            "exposed": true,
            "visibility": "LibraryVisibilityPublic",
            "build-info": {
              "buildable": true,
              "buildTools": [],
              "buildToolDepends": [],
              "cppOptions": [],
              "asmOptions": [],
              "cmmOptions": [],
              "ccOptions": [],
              "cxxOptions": [],
              "ldOptions": [],
              "pkgconfigDepends": [],
              "frameworks": [],
              "extraFrameworkDirs": [],
              "asmSources": [],
              "cmmSources": [],
              "cSources": [],
              "cxxSources": [],
              "jsSources": [],
              "hsSourceDirs": [],
              "otherModules": [],
              "virtualModules": [],
              "autogenModules": [],
              "defaultLanguage": null,
              "otherLanguages": [],
              "defaultExtensions": [],
              "otherExtensions": [],
              "oldExtensions": [],
              "extraLibs": [],
              "extraGHCiLibs": [],
              "extraBundledLibs": [],
              "extraLibFlavours": [],
              "extraDynLibFlavours": [],
              "extraLibDirs": [],
              "includeDirs": [],
              "includes": [],
              "autogenIncludes": [],
              "installIncludes": [],
              "options": [
                [],
                []
              ],
              "profOptions": [
                [],
                []
              ],
              "sharedOptions": [
                [],
                []
              ],
              "staticOptions": [
                [],
                []
              ],
              "customFieldsBI": [],
              "targetBuildDepends": [
                {
                  "package-name": "base",
                  "version-range": ">=4 && <5",
                  "library": [
                    {}
                  ]
                }
              ],
              "mixins": []
            }
          },
          "condTreeConstraints": [
            {
              "package-name": "base",
              "version-range": ">=4 && <5",
              "library": [
                {}
              ]
            }
          ],
          "condTreeComponents": []
        }
      }
    ]
  }
}
