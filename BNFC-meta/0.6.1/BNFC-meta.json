{
  "description": {
    "spec-version": {
      "Right": ">=1.6"
    },
    "package": {
      "name": "BNFC-meta",
      "version": [
        0,
        6,
        1
      ]
    },
    "license": {
      "Right": "OtherLicense"
    },
    "license-files": [
      "LICENSE"
    ],
    "copyright": "",
    "maintainer": "Artem Pelenitsyn <artem.pelenitsyn@gmail.com>",
    "author": "Jonas Dureg√•rd",
    "stability": "",
    "tested-with": [],
    "homepage": "",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "https://github.com/ulysses4ever/BNFC-meta",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": "BNFC-meta"
      }
    ],
    "synopsis": "Deriving Parsers and Quasi-Quoters from BNF Grammars",
    "description": "This package provides a very simple way of defining a compiler\nfront-end for a language by embedding a BNF grammar directly into a Haskell\nsource file.\nSpecifically, given a quasi-quoted LBNF grammar (as used by the BNF Converter)\nit generates (using Template Haskell) a LALR parser and pretty pretty printer\nfor the language. The parser is then used to automatically define a\nquasi-quoter for the defined language so it can also be seamlessly embedded\nin Haskell source code. With a\nsimple addition to the gramwmar, the user can define a universal syntax for\nanti-quoting. This\nmeans that any grammar non-terminal can be replaced by a quoted Haskell\nexpression of the appropriate type. A few example languages are included in\nthe source tarball.\n\nThe LBNF grammar formalism is described thoroughly in the BNF Converter\ndocumentation: <http://bnfc.digitalgrammars.com/>\n\nThis library and the additions it makes to LBNF is described in a\n2011 Haskell Symposium paper titled \\\"Embedded Parser Generators\\\":\n<http://wiki.portal.chalmers.se/cse/pmwiki.php/FP/EmbeddedParserGenerators>",
    "category": "Development, parsing, text, language",
    "custom-fields": [
      [
        "x-revision",
        "5"
      ]
    ],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [
      "examples/jll/JavaletteLight.hs",
      "examples/jll/UseJll.hs",
      "examples/typesafe/Example.hs",
      "examples/typesafe/Typesafe.hs",
      "Bootstrap/Bootstrap.hs"
    ],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Language",
          "LBNF"
        ],
        [
          "Language",
          "LBNF",
          "Runtime"
        ],
        [
          "Language",
          "LBNF",
          "Compiletime"
        ],
        [
          "Language",
          "LBNF",
          "Grammar"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [
          [
            "Language",
            "LBNF",
            "CF"
          ],
          [
            "Language",
            "LBNF",
            "CFtoAbstract"
          ],
          [
            "Language",
            "LBNF",
            "CFtoAlex2"
          ],
          [
            "Language",
            "LBNF",
            "CFtoHappy"
          ],
          [
            "Language",
            "LBNF",
            "CFtoLayout"
          ],
          [
            "Language",
            "LBNF",
            "CFtoPrinter"
          ],
          [
            "Language",
            "LBNF",
            "CFtoQQ"
          ],
          [
            "Language",
            "LBNF",
            "GetCF"
          ],
          [
            "Language",
            "LBNF",
            "TypeChecker"
          ],
          [
            "Language",
            "LBNF",
            "Utils"
          ],
          [
            "Language",
            "Haskell",
            "TH",
            "Hide"
          ]
        ],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": null,
        "otherLanguages": [],
        "defaultExtensions": [],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.2 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "array",
            "version-range": ">=0.4 && <0.6",
            "library": [
              {}
            ]
          },
          {
            "package-name": "fail",
            "version-range": ">=4.9 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "template-haskell",
            "version-range": ">=2.12 && <3",
            "library": [
              {}
            ]
          },
          {
            "package-name": "haskell-src-meta",
            "version-range": ">=0.5 && <1.0",
            "library": [
              {}
            ]
          },
          {
            "package-name": "happy-meta",
            "version-range": ">=0.2.0.4 && <0.3",
            "library": [
              {}
            ]
          },
          {
            "package-name": "alex-meta",
            "version-range": ">=0.3.0.5 && <0.4",
            "library": [
              {}
            ]
          },
          {
            "package-name": "syb",
            "version-range": ">=0.2 && <1.0",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.2 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "array",
        "version-range": ">=0.4 && <0.6",
        "library": [
          {}
        ]
      },
      {
        "package-name": "fail",
        "version-range": ">=4.9 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "template-haskell",
        "version-range": ">=2.12 && <3",
        "library": [
          {}
        ]
      },
      {
        "package-name": "haskell-src-meta",
        "version-range": ">=0.5 && <1.0",
        "library": [
          {}
        ]
      },
      {
        "package-name": "happy-meta",
        "version-range": ">=0.2.0.4 && <0.3",
        "library": [
          {}
        ]
      },
      {
        "package-name": "alex-meta",
        "version-range": ">=0.3.0.5 && <0.4",
        "library": [
          {}
        ]
      },
      {
        "package-name": "syb",
        "version-range": ">=0.2 && <1.0",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
