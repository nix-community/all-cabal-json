name:           no-role-annots
version:        1.0
cabal-version:  >= 1.10
synopsis:       Role annotations without -XRoleAnnotations
homepage:       https://github.com/goldfirere/no-role-annots
category:       Haskell
author:         Richard Eisenberg <eir@cis.upenn.edu>
maintainer:     Richard Eisenberg <eir@cis.upenn.edu>
bug-reports:    https://github.com/goldfirere/no-role-annots/issues
stability:      experimental
extra-source-files: README.md, CHANGES.md
license:        BSD3
license-file:   LICENSE
build-type:     Simple
description:
    This package is intended to ease the transition from GHC 7.6.3- to GHC 7.8+
    by providing a backward-compatible role annotation syntax. The module
    Language.Haskell.RoleAnnots exports backward-compatible declarations
    usable to assign stricter roles to declarations. Proper role annotations
    are preferred, but these work, too.

    The module Language.Haskell.RoleAnnots.Check provides a way to check
    that a datatype has a set of desired roles. This might be suitable for
    use in a testsuite.

    See the module documentation for details.

    Note that this package works only with GHC 7.4 and up, because it depends
    on the -XPolyKinds extension. If you need backward compatibility before
    7.4, then please look at the source code and adapt the definitions to the
    kinds of the variables in your program.

source-repository this
  type:     git
  location: https://github.com/goldfirere/no-role-annots.git
  tag:      v1.0

library
  build-depends:      
      base >= 4.5 && < 5,
      template-haskell
  exposed-modules:    Language.Haskell.RoleAnnots,
                      Language.Haskell.RoleAnnots.Check
  default-language:   Haskell2010

test-suite sanity-check
  type:               exitcode-stdio-1.0
  ghc-options:        -Wall -Werror -main-is Test.Test
  default-language:   Haskell2010
  main-is:            Test/Test.hs
  other-modules:      Test.Defns
  if impl(ghc >= 7.7)
    default-extensions: RoleAnnotations

  build-depends:
      base >= 4.5 && < 5,
      template-haskell
