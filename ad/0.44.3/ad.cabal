name:         ad
version:      0.44.3
license:      BSD3
license-File: LICENSE
copyright:    (c) Edward Kmett 2010,
              (c) Barak Pearlmutter and Jeffrey Mark Siskind 2008-2009
author:       Edward Kmett
maintainer:   ekmett@gmail.com
stability:    Experimental
category:     Math
homepage:     http://patch-tag.com/r/ekmett/ad
synopsis:     Automatic Differentiation
description:  
    Forward-, reverse- and mixed- mode automatic differentiation combinators with a common API.
    . 
    Type-level \"branding\" is used to both prevent the end user from confusing infinitesimals 
    and to limit unsafe access to the implementation details of each Mode.
    .
    Each mode has a separate module full of combinators.
    .
    * @Numeric.AD.Mode.Forward@ provides basic forward-mode AD. It is good for computing simple derivatives.
    .
    * @Numeric.AD.Mode.Reverse@ uses benign side-effects to compute reverse-mode AD. It is good for computing gradients in one pass.
    .
    * @Numeric.AD.Mode.Sparse@ computes a sparse forward-mode AD tower. It is good for higher derivatives or large numbers of outputs.
    .
    * @Numeric.AD.Mode.Tower@ computes a dense forward-mode AD tower useful for higher derivatives of single input functions.
    .
    * @Numeric.AD.Mode.Mixed@ computes using whichever mode or combination thereof is suitable to each individual combinator. This mode is the default, re-exported by @Numeric.AD@
    .
    . 
    While not every mode can provide all operations, the following basic operations are supported, modified as 
    appropriate by the suffixes below:
    .
    * 'grad' computes the gradient (partial derivatives) of a function at a point.
    .
    * 'jacobian' computes the Jacobian matrix of a function at a point.
    .
    * 'diff' computes the derivative of a function at a point.
    .
    * 'du' computes a directional derivative of a function at a point.
    .
    * 'hessian' computes the Hessian matrix (matrix of second partial derivatives) of a function at a point.
    .
    The following suffixes alter the meanings of the functions above as follows:
    .
    * @\'@ -- also return the answer
    .
    * @With@ lets the user supply a function to blend the input with the output
    .
    * @F@ is a version of the base function lifted to return a 'Traversable' (or 'Functor') result
    .
    * @s@ means the function returns all higher derivatives in a list or f-branching 'Stream'
    .
    * @T@ means the result is transposed with respect to the traditional formulation.
    .
    * @0@ means that the resulting derivative list is padded with 0s at the end.
    .
    Changes since 0.40.0
    .
    * Fixed bug fix for @'(/)' :: (Mode s, Fractional a) => AD s a@
    .
    * Improved documentation
    .
    * Regularized naming conventions
    .
    * Exposed 'Id', probe, and lower methods via @Numeric.AD.Types@
    .
    * Removed monadic combinators
    .
    * Retuned the 'Mixed' mode jacobian calculations to only require a 'Functor'-based result.
    .
    * Added unsafe variadic 'vgrad', 'vgrad'', and 'vgrads' combinators

build-type:   Simple
build-depends:       
    base >= 4 && < 5,
    data-reify >= 0.5 && < 0.6, 
    containers >= 0.2 && < 0.4,
    template-haskell >= 2.4 && < 2.5,
    array >= 0.2 && < 0.4

exposed-modules:
    Numeric.AD
    Numeric.AD.Classes
    Numeric.AD.Types
    Numeric.AD.Newton

    Numeric.AD.Internal.Classes
    Numeric.AD.Internal.Combinators

    Numeric.AD.Internal.Forward
    Numeric.AD.Internal.Tower
    Numeric.AD.Internal.Reverse
    Numeric.AD.Internal.Sparse
    Numeric.AD.Internal.Dense
    Numeric.AD.Internal.Composition

    Numeric.AD.Mode.Directed
    Numeric.AD.Mode.Forward
    Numeric.AD.Mode.Mixed
    Numeric.AD.Mode.Reverse
    Numeric.AD.Mode.Tower
    Numeric.AD.Mode.Sparse

other-modules:
    Numeric.AD.Internal.Types
    Numeric.AD.Internal.Comonad
    Numeric.AD.Internal.Stream
    Numeric.AD.Internal.Tensors
    Numeric.AD.Internal.Identity

Extra-Source-Files: TODO
GHC-Options: -Wall -fspec-constr -fdicts-cheap -O2
