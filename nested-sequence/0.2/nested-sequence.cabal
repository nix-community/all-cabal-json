
Name:                nested-sequence
Version:             0.2
Synopsis:            List-like data structures with O(log(n)) random access
Description:         List-like data structures implemented using nested data types and polymorphic
                     recursion. Also called \"n-ary random access lists\". They supports @O(log(n))@ lookup 
                     while still having amortized @O(1)@ access to the left end of the sequence. 
                     Somewhat similar to finger trees, but much simpler, and the ternary and 
                     quaternary versions are also more memory efficient; however, modifying 
                     the right end of the sequence is still slow. See "Data.Nested.Seq" 
                     for general comments and "Data.Nested.Seq.Binary.Lazy" for an explanation
                     of the data structure.
Author:              Balazs Komuves, Peter Divianszky
license:             BSD3
license-file:        LICENSE
Copyright:           (c) 2016 Balazs Komuves, Peter Divianszky
Maintainer:          bkomuves (plus) hackage (at) gmail (dot) com
Homepage:            http://code.haskell.org/~bkomuves/
Stability:           Experimental
Category:            Data Structures, Data
Tested-With:         GHC == 7.10.3
Cabal-Version:       >= 1.8
Build-Type:          Simple

extra-source-files:  src/Data/Nested/Seq/Binary/sequence.inc
                     src/Data/Nested/Seq/Binary/exp_imp.inc
                     src/Data/Nested/Seq/Ternary/sequence.inc
                     src/Data/Nested/Seq/Ternary/exp_imp.inc
                     src/Data/Nested/Seq/Quaternary/sequence.inc
                     src/Data/Nested/Seq/Quaternary/exp_imp.inc
                     test/Tests/tests.inc
                     doc/*.png

extra-doc-files:     doc/*.png

source-repository head
  type:     darcs
  location: http://code.haskell.org/~bkomuves/projects/nested-sequence/
  
Library
  Build-Depends:       base >= 4 && < 5

  Exposed-Modules:     Data.Nested.Seq
                       Data.Nested.Seq.Binary
                       Data.Nested.Seq.Binary.Lazy
                       Data.Nested.Seq.Binary.Strict
                       Data.Nested.Seq.Ternary
                       Data.Nested.Seq.Ternary.Lazy
                       Data.Nested.Seq.Ternary.Strict
                       Data.Nested.Seq.Quaternary
                       Data.Nested.Seq.Quaternary.Lazy
                       Data.Nested.Seq.Quaternary.Strict

  Extensions:          CPP, BangPatterns, PatternSynonyms
  Hs-Source-Dirs:      src

  -- note: force-recomp is necessary since the source code is included via 
  -- the C preprocessor, which breaks the recompilation checker 

  ghc-options:         -fforce-recomp -Wall -fno-warn-unused-matches -fno-warn-unused-imports -fno-warn-unused-binds
                       -fno-warn-incomplete-patterns -fno-warn-name-shadowing

  -- cpp-options:         -DTESTING
 
test-suite nested-sequence-tests
                      
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             TestSuite.hs

  other-modules:       Tests.Binary.Lazy
                       Tests.Binary.Strict
                       Tests.Ternary.Lazy
                       Tests.Ternary.Strict
                       Tests.Quaternary.Lazy
                       Tests.Quaternary.Strict

  build-depends:       base >= 4 && < 5, nested-sequence,
                       QuickCheck >= 2, test-framework, test-framework-quickcheck2

  ghc-options:         -fforce-recomp -fno-warn-incomplete-patterns 

  Extensions:          CPP, BangPatterns, PatternSynonyms

