Name:                scc
Version:             0.8.1
Cabal-Version:       >= 1.10
Build-Type:          Simple
Synopsis:            Streaming component combinators
Category:            Control, Combinators, Concurrency
Tested-with:         GHC == 7.4, GHC == 7.6
Description:
  SCC is a layered library of Streaming Component Combinators. The lowest layer in "Control.Concurent.SCC.Streams"
  defines stream abstractions and nested producer-consumer coroutine pairs based on the Coroutine monad transformer.
  On top of that are streaming component types, a number of primitive streaming components and a set of component
  combinators. Finally, there is an executable that exposes all the framework functionality in a command-line shell.
  .
  The original library design is based on paper <http://conferences.idealliance.org/extreme/html/2006/Blazevic01/EML2006Blazevic01.html>
  .
  Mario Bla&#382;evi&#263;, Streaming component combinators, Extreme Markup Languages, 2006.

License:             GPL
License-file:        LICENSE.txt
Copyright:           (c) 2008-2013 Mario Blazevic
Author:              Mario Blazevic
Maintainer:          blamario@yahoo.com
Homepage:            http://trac.haskell.org/SCC/
Extra-source-files:  grammar.bnf Makefile
Source-repository head
  type:              darcs
  location:          http://code.haskell.org/SCC/
Flag Test
  Description: Install QuickCheck test suite
  Default:     False

Executable shsh
  Main-is:           Shell.hs
  Other-Modules:     Control.Concurrent.SCC.Streams, Control.Concurrent.SCC.Types, Control.Concurrent.SCC.Coercions,
                     Control.Concurrent.SCC.Combinators, Control.Concurrent.SCC.Primitives, Control.Concurrent.SCC.XML,
                     Control.Concurrent.Configuration, Control.Concurrent.SCC.Configurable
  Build-Depends:     base < 5, containers, transformers >= 0.2 && < 0.4, bytestring < 1.0, text < 1.0,
                     monoid-subclasses < 0.3, incremental-parser >= 0.2.2 && < 0.3,
                     monad-parallel, monad-coroutine == 0.8.*,
                     process, haskeline, parsec == 3.*
  GHC-options:       -threaded
  if impl(ghc >= 7.0.0)
     default-language: Haskell2010

test-suite Main
  Type:              exitcode-stdio-1.0
  x-uses-tf:         true
  Main-is:           Test/TestSCC.hs
  Other-Modules:     Control.Concurrent.SCC.Streams, Control.Concurrent.SCC.Types, Control.Concurrent.SCC.Coercions,
                     Control.Concurrent.SCC.Combinators, Control.Concurrent.SCC.Primitives,
                     Control.Concurrent.SCC.XML,
                     Control.Concurrent.Configuration, Control.Concurrent.SCC.Configurable
  Build-Depends:     base < 5, containers, transformers >= 0.2 && < 0.4, bytestring < 1.0, text < 1.0,
                     monoid-subclasses < 0.3, incremental-parser >= 0.2.2 && < 0.3,
                     monad-parallel, monad-coroutine == 0.8.*,
                     QuickCheck >= 2 && < 3, test-framework >= 0.4.1, test-framework-quickcheck2
  GHC-options:       -threaded -fcontext-stack=30
  if !flag(test)
    buildable:       False
  if impl(ghc >= 7.0.0)
     default-language: Haskell2010

Library
  Exposed-Modules:   Control.Concurrent.SCC.Streams, Control.Concurrent.SCC.Types,
                     Control.Concurrent.SCC.Configurable,
                     Control.Concurrent.SCC.Parallel, Control.Concurrent.SCC.Sequential
  Other-Modules:     Control.Concurrent.Configuration, Control.Concurrent.SCC.Coercions,
                     Control.Concurrent.SCC.Combinators.Parallel, Control.Concurrent.SCC.Combinators.Sequential,
                     Control.Concurrent.SCC.Combinators, Control.Concurrent.SCC.Primitives, Control.Concurrent.SCC.XML
  Build-Depends:     base < 5, containers, transformers >= 0.2 && < 0.4, bytestring < 1.0, text < 1.0,
                     monoid-subclasses < 0.3, incremental-parser >= 0.2.2 && < 0.3,
                     monad-parallel, monad-coroutine == 0.8.*
  GHC-prof-options:  -auto-all
  if impl(ghc >= 7.0.0)
     default-language: Haskell2010
