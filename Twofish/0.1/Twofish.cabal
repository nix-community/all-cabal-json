Name:          Twofish
Version:       0.1
Category:      Cryptography, Codec
Stability:     experimental
Synopsis:      An implementation of the Twofish Symmetric-key cipher.
Description:   Implements the Twofish symmetric block cipher, designed by:
               Bruce Schneier, John Kelsey, Doug Whiting, David Wagner, Chris Hall,
               and Niels Ferguson.

               As well, this module includes some generic definitions for
               ciphers and cipher-block-chaining mode, in the Data.Cipher
               module.  In the future, these should probably either be
               moved to their own package, or all of this should be merged
               into the Crypto package.

               Acknowledgments:

               Dominic Steinitz and Creighton Hogg for their work on the Crypto
               package, upon which this package depends (particularily for the
               Data.LargeWord module).

               Stephen Tetley for his advice and code examples provided on
               the Haskell-Beginners mailing list, in response to a question
               I had, which helped me to create a transformer version of the Cbc monad.

Author:        Ron Leisti
Maintainer:    ron.leisti@gmail.com
Bug-Reports:   mailto:ron.leisti@gmail.com
Homepage:

License:       BSD3
License-File:  LICENSE
Cabal-Version: >= 1.2
Build-Type:    Simple

Library
  Build-Depends:   array >= 0.3
                   ,base >= 4 && < 5
                   ,Crypto >= 4.2.1
                   ,HUnit >= 1.2.2.1
                   ,mtl >= 1.1.0.2
  Exposed-Modules: Codec.Encryption.Twofish
                   ,Data.Cipher
  Extensions:      FlexibleContexts
                   ,FlexibleInstances 
                   ,FunctionalDependencies
                   ,GeneralizedNewtypeDeriving
                   ,MultiParamTypeClasses
                   ,TypeSynonymInstances
  Ghc-Options:     -Wall

Executable Test
  Main-Is:       Test.hs
  Ghc-options:   -fregs-graph
  Other-Modules: Data.Cipher
                 Codec.Encryption.Twofish

-- Commented, because I'm not sure about the ramifications
-- of attempting to build an executable with profiling 
-- on a machine that doesn't have the required profiling 
-- libraries installed.
--
--Executable CbcPerformance
--  Main-Is:       CbcPerformance.hs
--  Ghc-options:   -fregs-graph -prof -auto-all -O2
--  Other-Modules: Data.Cipher
--                 Codec.Encryption.Twofish
