-- Initial avro.cabal generated by cabal init.  For further documentation,
-- see http://haskell.org/cabal/users-guide/

name:                avro
version:             0.2.1.0
synopsis:            Avro serialization support for Haskell
description:         Avro serialization and deserialization support for Haskell
homepage:            https://github.com/haskell-works/hw-haskell-avro.git
license:             BSD3
license-file:        LICENSE
author:              Thomas M. DuBuisson
maintainer:          Alexey Raga <alexey.raga@gmail.com>
-- copyright:
category:            Data
build-type:          Simple
extra-source-files:  ChangeLog.md, test/data/reused.avsc, test/data/small.avsc, test/data/enums.avsc
cabal-version:       >=1.10

source-repository head
  type:     git
  location: https://github.com/GaloisInc/avro.git

flag dev
  default: False
  manual: True
  description: Use development GHC flags

flag templateHaskell
  Description: Build Avro.Deriving, which uses Template Haskell.
  Default: True

library
  exposed-modules:      Data.Avro,
                        Data.Avro.Decode,
                        Data.Avro.DecodeRaw,
                        Data.Avro.Deconflict,
                        Data.Avro.Encode,
                        Data.Avro.EncodeRaw,
                        Data.Avro.Schema,
                        Data.Avro.Types,
                        Data.Avro.Zag,
                        Data.Avro.Zig,
                        Data.Avro.HasAvroSchema,
                        Data.Avro.FromAvro,
                        Data.Avro.ToAvro
  other-extensions:    OverloadedStrings
  build-depends:       base >=4.8 && <5.0,
                       aeson,
                       array,
                       base16-bytestring,
                       binary,
                       bytestring,
                       containers,
                       data-binary-ieee754,
                       entropy,
                       fail,
                       hashable,
                       mtl,
                       pure-zlib,
                       scientific,
                       semigroups,
                       tagged,
                       text,
                       unordered-containers,
                       vector

  if flag(templateHaskell)
    build-depends: template-haskell >= 2.4
    other-extensions: TemplateHaskell
    exposed-modules: Data.Avro.Deriving
    other-modules:        Data.Avro.Deriving.NormSchema

  hs-source-dirs:      src
  default-language:    Haskell2010
  ghc-options:         -O2
  if flag(dev)
    ghc-options: -Wall -Werror

test-suite test
  type:                 exitcode-stdio-1.0
  default-language:     Haskell2010
  hs-source-dirs:       test
  other-modules:        Avro.Codec.ArraySpec
                      , Avro.Codec.BoolSpec
                      , Avro.Codec.CodecRawSpec
                      , Avro.Codec.DoubleSpec
                      , Avro.Codec.FloatSpec
                      , Avro.Codec.Int64Spec
                      , Avro.Codec.MaybeSpec
                      , Avro.Codec.NestedSpec
                      , Avro.Codec.TextSpec
                      , Avro.Codec.ZigZagSpec
                      , Avro.EncodeRawSpec
                      , Avro.ToAvroSpec

  build-depends:        base >=4.6 && < 5
                      , aeson
                      , lens-aeson
                      , array
                      , avro
                      , base16-bytestring
                      , binary
                      , bytestring
                      , containers
                      , entropy
                      , extra
                      , fail
                      , hashable
                      , hspec
                      , lens
                      , mtl
                      , pure-zlib
                      , QuickCheck
                      , scientific
                      , semigroups
                      , tagged
                      , text
                      , transformers
                      , unordered-containers
                      , vector

  if flag(templateHaskell)
    build-depends: template-haskell
    other-extensions: TemplateHaskell
    other-modules:    Avro.THEnumSpec
                    , Avro.THReusedSpec
                    , Avro.THSimpleSpec

  main-is:              Spec.hs
  ghc-options:          -threaded
  if flag(dev)
    ghc-options: -Wall -Werror
