{
  "description": {
    "spec-version": {
      "Right": ">=1.10"
    },
    "package": {
      "name": "constrained-categories",
      "version": [
        0,
        4,
        2,
        0
      ]
    },
    "license": {
      "Right": "OtherLicense"
    },
    "license-files": [
      "COPYING"
    ],
    "copyright": "",
    "maintainer": "(@) jsag $ hvl.no",
    "author": "Justus Sagemüller",
    "stability": "",
    "tested-with": [
      {
        "compiler": "GHC",
        "versionRange": "==7.8.4"
      },
      {
        "compiler": "GHC",
        "versionRange": "==7.10.2"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.0.2"
      },
      {
        "compiler": "GHC",
        "versionRange": "==8.2.1"
      }
    ],
    "homepage": "https://github.com/leftaroundabout/constrained-categories",
    "pkg-url": "",
    "bug-reports": "",
    "source-repos": [
      {
        "kind": {},
        "type": "Git",
        "location": "git://github.com/leftaroundabout/constrained-categories.git",
        "module": null,
        "branch": null,
        "tag": null,
        "subdir": null
      }
    ],
    "synopsis": "Constrained clones of the category-theory type classes, using ConstraintKinds.",
    "description": "Haskell has, and makes great use of, powerful facilities from category\ntheory – basically various variants of functors.\n\nHowever, all those are just endofunctors in Hask, the category of\nall Haskell types with functions as morphisms. Which is sufficient\nfor container / control structures that you want to be able to handle\nany type of data, but otherwise it's a bit limiting, seeing as\nthere are (in maths, science etc.) many categories that cannot properly\nbe represented this way. Commonly used libraries such as\n<http://hackage.haskell.org/package/vector-space> thus make\nlittle notion of the fact that the objects they deal with actually\nform a category, instead defining just specialised versions of\nthe operations.\n\nThis library generalises functors etc. to a much wider class of\ncategories, by allowing for constraints on objects (so these can have\nextra properties required). At the same time, we try to keep as close\nas possible to the well-known Haskell type class hierarchies rather\nthan exactly adopting the mathematicians' notions.\n\nConsider the README file, the examples, and/or the documentation to\n\"Control.Category.Constrained\" for how to make use of this.",
    "category": "control",
    "custom-fields": [],
    "build-type-raw": "Simple",
    "custom-setup": null,
    "library": null,
    "sublibraries": [],
    "executables": [],
    "foreign-libs": [],
    "test-suites": [],
    "benchmarks": [],
    "data-files": [],
    "data-dir": ".",
    "extra-source-files": [],
    "extra-tmp-files": [],
    "extra-doc-files": []
  },
  "library": {
    "condTreeData": {
      "name": {},
      "exposed-modules": [
        [
          "Control",
          "Category",
          "Constrained"
        ],
        [
          "Control",
          "Functor",
          "Constrained"
        ],
        [
          "Control",
          "Applicative",
          "Constrained"
        ],
        [
          "Control",
          "Arrow",
          "Constrained"
        ],
        [
          "Control",
          "Monad",
          "Constrained"
        ],
        [
          "Control",
          "Category",
          "Hask"
        ],
        [
          "Control",
          "Category",
          "Discrete"
        ],
        [
          "Control",
          "Category",
          "Constrained",
          "Prelude"
        ],
        [
          "Control",
          "Category",
          "Constrained",
          "Reified"
        ],
        [
          "Control",
          "Category",
          "Constrained",
          "Reified",
          "PolyPattern"
        ],
        [
          "Data",
          "Foldable",
          "Constrained"
        ],
        [
          "Data",
          "Traversable",
          "Constrained"
        ],
        [
          "Data",
          "CategoryObject",
          "Product"
        ]
      ],
      "re-exported-modules": [],
      "signatures": [],
      "exposed": true,
      "visibility": "LibraryVisibilityPublic",
      "build-info": {
        "buildable": true,
        "buildTools": [],
        "buildToolDepends": [],
        "cppOptions": [],
        "asmOptions": [],
        "cmmOptions": [],
        "ccOptions": [],
        "cxxOptions": [],
        "ldOptions": [],
        "pkgconfigDepends": [],
        "frameworks": [],
        "extraFrameworkDirs": [],
        "asmSources": [],
        "cmmSources": [],
        "cSources": [],
        "cxxSources": [],
        "jsSources": [],
        "hsSourceDirs": [],
        "otherModules": [],
        "virtualModules": [],
        "autogenModules": [],
        "defaultLanguage": "Haskell2010",
        "otherLanguages": [],
        "defaultExtensions": [
          {
            "enable-extension": "ConstraintKinds"
          },
          {
            "enable-extension": "TypeFamilies"
          },
          {
            "enable-extension": "FlexibleInstances"
          },
          {
            "enable-extension": "UndecidableInstances"
          },
          {
            "enable-extension": "Trustworthy"
          }
        ],
        "otherExtensions": [],
        "oldExtensions": [],
        "extraLibs": [],
        "extraGHCiLibs": [],
        "extraBundledLibs": [],
        "extraLibFlavours": [],
        "extraDynLibFlavours": [],
        "extraLibDirs": [],
        "includeDirs": [],
        "includes": [],
        "autogenIncludes": [],
        "installIncludes": [],
        "options": [
          [],
          []
        ],
        "profOptions": [
          [],
          []
        ],
        "sharedOptions": [
          [],
          []
        ],
        "staticOptions": [
          [],
          []
        ],
        "customFieldsBI": [],
        "targetBuildDepends": [
          {
            "package-name": "base",
            "version-range": ">=4.8 && <5",
            "library": [
              {}
            ]
          },
          {
            "package-name": "tagged",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "void",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "semigroups",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "contravariant",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "fail",
            "version-range": "-any",
            "library": [
              {}
            ]
          },
          {
            "package-name": "trivial-constraint",
            "version-range": ">=0.4 && <0.8",
            "library": [
              {}
            ]
          }
        ],
        "mixins": []
      }
    },
    "condTreeConstraints": [
      {
        "package-name": "base",
        "version-range": ">=4.8 && <5",
        "library": [
          {}
        ]
      },
      {
        "package-name": "tagged",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "void",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "semigroups",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "contravariant",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "fail",
        "version-range": "-any",
        "library": [
          {}
        ]
      },
      {
        "package-name": "trivial-constraint",
        "version-range": ">=0.4 && <0.8",
        "library": [
          {}
        ]
      }
    ],
    "condTreeComponents": []
  }
}
