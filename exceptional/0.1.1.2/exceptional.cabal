-- Initial exceptional.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                exceptional
version:             0.1.1.2
synopsis:            A type for pure code that can fail.
description:         
  This is a very simple type:
  .
  > data Exceptional x
  >   = Failure String
  >   | Success x
  .
  It's much like @Maybe@, except instead of @Nothing@, we have @Failure
  String@.
  .
  A comparison could also be made to @Either String@. I made this library
  because I was dissatisfied with the @Monad@ instance for @Either@. In this
  type, @fail = Failure@. It's rather simple.
  .
  __Changes__
  .
  [0.1.1.2] Yet another formatting fix.
  .
  [0.1.1.1] Formatting fix to the haddock documentation.
  .
  [0.1.1.0] Add @runExceptional@ function.
  .
  [0.1.0.1] Minor documentation changes. No changes to the API.
  .
  [0.1.0.0] Initial version
homepage:            https://github.com/pharpend/exceptional
license:             BSD2
license-file:        LICENSE
author:              Peter Harpending
maintainer:          peter@harpending.org
copyright:           Copyright (c) 2015, Peter Harpending.
category:            Control
build-type:          Simple
cabal-version:       >=1.10
extra-source-files:
  LICENSE
  README.md

library
  build-depends:       base ==4.*
  exposed-modules:     Control.Exceptional
  default-language:    Haskell98

source-repository head
  type: git
  location: https://github.com/pharpend/exceptional.git
  branch: master

source-repository this
  type: git
  location: https://github.com/pharpend/exceptional.git
  branch: master
  tag: 0.1.1.2
