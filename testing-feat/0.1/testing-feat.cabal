Name:                testing-feat
Version:             0.1
Synopsis:            Functional enumeration for systematic and random testing
Description:         Feat (Functional Enumeration of Abstract Types) 
                     provides an enumeration as a function from natural 
                     numbers to values (similar to @toEnum@). This can be used
                     both for SmallCheck-style systematic testing and QuickCheck 
                     style random testing, and hybrids of the two.
                     .
                     The enumerators are defined in a very boilerplate manner
                     and there is a Template Haskell script for deriving the 
                     class instance for most types.
                     "Test.Feat" contain a subset of the other modules that 
                     should be sufficient for most test usage. There 
                     is a large scale example in the tar ball (testing the 
                     Template Haskell pretty printer).
                                          
License:             BSD3
License-file:        LICENSE
Author:              Jonas Duregård
Maintainer:          jonas.duregard@gmail.com
Copyright:           Jonas Duregård
Category:            Testing
Build-type:          Simple

Extra-source-files:  
    examples/TestTH.hs

Cabal-version:       >=1.2

Library
  Hs-source-dirs:       .
  Exposed-modules:
    Test.Feat, 
    Test.Feat.Access,
    Test.Feat.Class,
    Test.Feat.Enumerate,
    Test.Feat.Modifiers 
    Control.Monad.TagShare

  
  Build-depends: 
    base >= 4.5 && <= 5,
    template-haskell >= 2.4 && < 2.8,
    mtl >= 1 && < 3,
    QuickCheck > 2 && < 3,
    containers < 1,
    data-memocombinators >= 0.4.2 && < 0.5
    
  Other-modules:
    Test.Feat.Internals.Derive
    Test.Feat.Internals.Tag
    
  